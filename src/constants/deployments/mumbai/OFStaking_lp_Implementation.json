{
  "address": "0xE79b34b6f719a4a6CFfCE8f2e978dcDC9E5Ca7D3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "enterAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proviousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "newMinStakeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proviousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "newRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "retireAmount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NEWFIELD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECSINDAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bold",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateEquivalenceInBold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAllRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "changeMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "changeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getCurrentCashout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_CurrentInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bold",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "leave",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bold",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a4f81bbaa66070e2fb3932d4b93a415a396e8a85c06b87adef9907c967751c3",
  "receipt": {
    "to": null,
    "from": "0x27C79fA7BeE16e515068F97C6ea4D273E738CC22",
    "contractAddress": "0xE79b34b6f719a4a6CFfCE8f2e978dcDC9E5Ca7D3",
    "transactionIndex": 1,
    "gasUsed": "1797844",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000800000000000004000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000200000000000000000000000200000000100000",
    "blockHash": "0x39cd62b3d5ac1ce764d66f899d4d21d46ae8e33930ad4149772cb22f4d4dd430",
    "transactionHash": "0x4a4f81bbaa66070e2fb3932d4b93a415a396e8a85c06b87adef9907c967751c3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25619742,
        "transactionHash": "0x4a4f81bbaa66070e2fb3932d4b93a415a396e8a85c06b87adef9907c967751c3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000027c79fa7bee16e515068f97c6ea4d273e738cc22",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001024336ea0fa03c000000000000000000000000000000000000000000000000662bd144e5ee40ef000000000000000000000000000000000000000000000be22fab0a5fe93ecb3200000000000000000000000000000000000000000000000065298e0dfbdea0b3000000000000000000000000000000000000000000000be230ad4d96d34e6b6e",
        "logIndex": 101,
        "blockHash": "0x39cd62b3d5ac1ce764d66f899d4d21d46ae8e33930ad4149772cb22f4d4dd430"
      }
    ],
    "blockNumber": 25619742,
    "cumulativeGasUsed": "3114260",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab20f7579c850e0fbcbcfcb1ce50b5a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"enterAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proviousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"newMinStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proviousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"newRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"retireAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NEWFIELD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECSINDAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"calculateEquivalenceInBold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getCurrentCashout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CurrentInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bold\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateEquivalenceInBold(uint256)\":{\"details\":\"calculate Bold equivalence of LP token using LiquidiyPool information\",\"params\":{\"lpAmount\":\"LP amount to transform in bold\"},\"returns\":{\"_0\":\"equivalent bold amount Transforms LP to bold taken into consideration LP supply EXAMPLE:   LP amount = 5000 LP tokens (you have staked)   Max supply= 1000,0000 LP Tokens (you control 0.5% of all LP tokens [5000])   Bold supply in LP Pool: 100,000 Bold tokens (calculations will use 0,5% of these tokens 500) So lpAmount (5000) -----> boldAmount(500)\"}},\"changeRate(uint256)\":{\"details\":\"Change interest rate \",\"params\":{\"_rate\":\"new interestrate (2000 =>20%)\"}},\"initialize(address,address,uint256,uint256,address)\":{\"details\":\"initialize function\",\"params\":{\"_bold\":\"Token to pay earnings\",\"_minAmount\":\"Minimun amount allowed to stake\",\"_rate\":\"intetest (20% =>2000)\",\"_token\":\"Token used to stake\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OFLPStaking.sol\":\"OFLPStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/BoldToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./BoldTokenStorage.sol\\\";\\r\\n\\r\\n/*\\r\\nBOLD Token : Is our company's token, that will be used to place bets against the house. \\r\\nThe rights to burn and mint this token is provided to only \\\"Allowed contracts\\\". Such contracts\\r\\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \\r\\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \\r\\nor burn these tokens.\\r\\n*/\\r\\n\\r\\ncontract BoldToken is \\r\\nInitializable,\\r\\nUUPSUpgradeable,\\r\\nERC20Upgradeable,\\r\\nOwnableUpgradeable,\\r\\nBoldTokenStorage\\r\\n{\\r\\n\\r\\n  event AdminUpdated(address _admin);\\r\\n\\r\\n    //Proxy Functions\\r\\n     /** @dev initialize proxied contract.\\r\\n     */\\r\\n     function initialize() public initializer {\\r\\n        __Ownable_init();\\r\\n          __UUPSUpgradeable_init();\\r\\n         __ERC20_init(\\\"BOLD TOKEN\\\", \\\"BOLD\\\");\\r\\n         _changeAdmin(msg.sender);\\r\\n\\r\\n       _mint(msg.sender, 100000000000000000000000000000000);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n\\r\\n    // End: Proxy Functions\\r\\n\\r\\n  modifier onlyAllowedContracts(){\\r\\n    require(isAllowedContract(msg.sender),\\\"BoldToken - This address is not allowed\\\");\\r\\n     _;\\r\\n  }\\r\\n\\r\\n  function mint(address to, uint amount) external onlyAllowedContracts {\\r\\n    _mint(to, amount);\\r\\n  }\\r\\n  \\r\\n\\r\\n  function burn(address owner, uint amount) external onlyAllowedContracts {\\r\\n    _burn(owner, amount);\\r\\n  }\\r\\n\\r\\n  function allowContract(address _contract)  external  onlyOwner{\\r\\n      allowedcontracts[_contract]=true;\\r\\n    }\\r\\n\\r\\n  function disAllowContract(address _contract)  external onlyOwner{\\r\\n    allowedcontracts[_contract]=false;\\r\\n  }\\r\\n\\r\\n  function isAllowedContract(address _contract) public view returns(bool){\\r\\n    if(allowedcontracts[_contract]==true){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n    }\\r\\n\\r\\n  function updateAdmin(address newAdmin) external onlyOwner {\\r\\n   transferOwnership(newAdmin);\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x37889c502877021c738b429eab0c4e4ee7145808242bd13be6bc5606b2bad600\"},\"contracts/BoldTokenStorage.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\nBOLD Token : Is our company's token, that will be used to place bets against the house. \\r\\nThe rights to burn and mint this token is provided to only \\\"Allowed contracts\\\". Such contracts\\r\\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \\r\\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \\r\\nor burn these tokens.\\r\\n*/\\r\\n\\r\\ncontract BoldTokenStorage  {\\r\\n  \\r\\n  mapping(address =>bool) allowedcontracts;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xfb96034d5dd65583a340857ba7235d6dbfa129d230b8597e004709bb26fff7f6\"},\"contracts/OFLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./BoldToken.sol\\\";\\r\\nimport \\\"./interface/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./OFLPStakingStorage.sol\\\";\\r\\n\\r\\n/* \\r\\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\\r\\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \\r\\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \\r\\n*/\\r\\n\\r\\ncontract OFLPStaking is \\r\\nInitializable, \\r\\nUUPSUpgradeable, \\r\\nOwnableUpgradeable,\\r\\nOFLPStakingStorage\\r\\n{\\r\\n\\r\\n       //Proxy Functions\\r\\n\\r\\n     /**\\r\\n        @dev initialize function\\r\\n        @param _token Token used to stake\\r\\n        @param _bold  Token to pay earnings\\r\\n        @param _rate intetest (20% =>2000)\\r\\n        @param _minAmount Minimun amount allowed to stake\\r\\n     \\r\\n      */\\r\\n     function initialize(address _token, address _bold, uint256 _rate, uint256 _minAmount,address _pair) public initializer {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n         _changeAdmin(msg.sender);\\r\\n\\r\\n        token = _token;\\r\\n        bold = _bold;\\r\\n        rate = _rate;\\r\\n        minStakeAmount= _minAmount;\\r\\n        pair = _pair;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n    //NEDED TO UPGRADE CONTRACT\\r\\n    // AS initialize(..) is not called again, we need a function to \\r\\n    // upgrade token data.\\r\\n   function upgrade(address _token, address _bold, address _pair) public onlyOwner {\\r\\n        bold = _bold;\\r\\n        token = _token;\\r\\n        pair = _pair;\\r\\n   } \\r\\n\\r\\n\\r\\n    // End: Proxy Functions\\r\\n\\r\\n    /**************************\\r\\n        EVENTS \\r\\n    */\\r\\n\\r\\n    event newRate(uint  proviousRate, uint  newRate,uint timestamp);\\r\\n    event newMinStakeAmount(uint  proviousRate, uint  newRate,uint timestamp);\\r\\n    event enterAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\\r\\n    event retireAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 balance;        \\r\\n        uint256 timestamp;\\r\\n        uint256 interestAccumulated;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public users;\\r\\n\\r\\n\\r\\n    \\r\\n    /*  This function allows the user to stake certain amount of staking token in the contract. User first \\r\\n    needs to give allowance to the contract to transfer the tokens and then call enter(). It will check whether\\r\\n    if user already has some stake in the contract, it will calculate the interest accumulated till now \\r\\n    and store it in \\\"interestAccumulated\\\" of struct, and update the timestamp to latest. Finally, contract will update \\r\\n    the user balance to reflect the recent  */\\r\\n    function enter(uint256 _amount) public {\\r\\n        uint256 previousBalance=0;\\r\\n        require(_amount >= minStakeAmount,\\\"Stake amount should be greater than minimum stake amount\\\");\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        if(user.balance >0){\\r\\n            previousBalance=user.balance;\\r\\n            uint256 boldAmount=calculateEquivalenceInBold(user.balance);\\r\\n            uint256 interestAccumulated = _calculateInterest(msg.sender, boldAmount);\\r\\n            user.interestAccumulated = user.interestAccumulated + interestAccumulated ;\\r\\n        }\\r\\n        user.balance = user.balance + _amount;\\r\\n        user.timestamp = block.timestamp;\\r\\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\\r\\n        emit enterAmount(previousBalance, user.balance, user.interestAccumulated,user.timestamp);\\r\\n    }\\r\\n\\r\\n    /* Allows user to withdraw part or the complete stake. In either case, he will be transferred the desired\\r\\n       amount of staking token and minted ALL of the interest gathered till now in form of reward token */\\r\\n\\r\\n    function leave(uint256 share) public returns(uint) {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.balance >= share,\\\"Share cannot be more than current deposits\\\");\\r\\n        require(share >= minStakeAmount,\\\"Withdraw amount should be more than the minimum req amount\\\");\\r\\n        \\r\\n        uint256 boldAmount=calculateEquivalenceInBold(user.balance);\\r\\n\\r\\n        uint256 interestCalculated = _calculateInterest(msg.sender,boldAmount);\\r\\n        user.interestAccumulated = 0;\\r\\n        uint previousBalance=user.balance;\\r\\n        user.balance= user.balance - share;\\r\\n        user.timestamp = block.timestamp;\\r\\n        IERC20(token).transfer(msg.sender,share);\\r\\n\\r\\n        BoldToken(bold).mint(msg.sender,interestCalculated);\\r\\n        emit retireAmount(previousBalance, user.balance, interestCalculated,user.timestamp);\\r\\n        return interestCalculated;\\r\\n    }\\r\\n\\r\\n    /* User can cashout all his rewards till this point as the contract will mint reward token*/\\r\\n    function cashoutAllRewards() public returns (uint) {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.balance > 0,\\\"User has no deposits\\\");\\r\\n     \\r\\n         uint256 boldAmount=calculateEquivalenceInBold(user.balance);\\r\\n\\r\\n        uint256 interestCalculated = _calculateInterest(msg.sender,boldAmount);\\r\\n        user.interestAccumulated = 0;\\r\\n        user.timestamp = block.timestamp;\\r\\n        BoldToken(bold).mint(msg.sender,interestCalculated);\\r\\n        emit retireAmount(user.balance, user.balance, interestCalculated,user.timestamp);\\r\\n\\r\\n        return interestCalculated;\\r\\n    }\\r\\n\\r\\n    /* Internal method used to calculate rewards gained for a particual user and given amount. It first \\r\\n       checks how many days have elapsed since the stake was deposited, then uses the simple interest formula\\r\\n       and returns the result */\\r\\n    function _calculateInterest(address _addr, uint256 share) internal view returns(uint) {\\r\\n        UserInfo storage user = users[_addr];\\r\\n        uint256 daysElapsed = (block.timestamp - user.timestamp)/SECSINDAY;\\r\\n        // prinicpal * (no of days / 365) * (rate/10000) , 20% return ==> rate = 2000\\r\\n        uint256 interestCalculated = (share*daysElapsed*rate)/(3650000); \\r\\n        uint256 totalInterest = user.interestAccumulated + interestCalculated;\\r\\n        return totalInterest;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev calculate Bold equivalence of LP token using LiquidiyPool information\\r\\n    * @param lpAmount LP amount to transform in bold\\r\\n    * @return equivalent bold amount\\r\\n    * Transforms LP to bold taken into consideration LP supply\\r\\n    * EXAMPLE:\\r\\n    *   LP amount = 5000 LP tokens (you have staked)\\r\\n    *   Max supply= 1000,0000 LP Tokens (you control 0.5% of all LP tokens [5000])\\r\\n    *   Bold supply in LP Pool: 100,000 Bold tokens (calculations will use 0,5% of these tokens 500)\\r\\n    * So lpAmount (5000) -----> boldAmount(500)\\r\\n     */\\r\\n    function calculateEquivalenceInBold(uint256 lpAmount) public view returns (uint256){\\r\\n        uint256 lp_supply = IUniswapV2Pair(pair).totalSupply();\\r\\n        require(lp_supply>0,\\\"Pair has 0 liquidity. Unable to calculate interest\\\");\\r\\n        (,uint256 boldAmount,) = IUniswapV2Pair(pair).getReserves();\\r\\n        return (lpAmount*boldAmount)/lp_supply;        \\r\\n    }\\r\\n\\r\\n    /* Returns the current stake amount and the reward amount gathered till now */\\r\\n    function getCurrentCashout(address sender) public view returns (uint _deposit,uint _CurrentInterest) {\\r\\n        uint256 deposit = users[sender].balance;\\r\\n        uint256 currentInterest = _calculateInterest(sender,deposit);\\r\\n        return (deposit,currentInterest);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Change interest rate \\r\\n    * @param _rate new interestrate (2000 =>20%)\\r\\n     */\\r\\n    function changeRate(uint256 _rate) external onlyOwner{\\r\\n        uint256 previous=rate;\\r\\n        rate = _rate;\\r\\n        emit newRate(previous, _rate, block.timestamp);\\r\\n    } \\r\\n\\r\\n    function changeMinStakeAmount(uint256 _minStakeAmount) external onlyOwner{\\r\\n        uint256 previous=minStakeAmount;\\r\\n        minStakeAmount = _minStakeAmount;\\r\\n        emit newMinStakeAmount(previous, minStakeAmount, block.timestamp);\\r\\n    } \\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x295119621f29c70ec8c2875fef1a4748e3f2071b2ec950b92d53ace48b2558fe\",\"license\":\"MIT\"},\"contracts/OFLPStakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/* \\r\\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\\r\\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \\r\\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \\r\\n*/\\r\\n\\r\\ncontract OFLPStakingStorage{\\r\\n\\r\\n    address public pair;\\r\\n    address public bold; // reward token address\\r\\n    address public token;   // staking token address\\r\\n    uint256 public rate;          // amount of reward token per 10000 of staking token \\r\\n    uint256 public minStakeAmount;// minimum amount that can be staked in wei \\r\\n    uint constant public SECSINDAY=60*60*24;\\r\\n\\r\\n        // New field\\r\\n    uint256 public NEWFIELD;\\r\\n}\\r\\n\",\"keccak256\":\"0x64781c322b3bdbb33714283b54af1cba9382e22851d92584118326f2c7f43f8f\",\"license\":\"MIT\"},\"contracts/interface/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    // Only functions needed for calculations\\r\\n    function totalSupply() external view returns (uint);\\r\\n  \\r\\n    // Only functions needed for calculations\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x6f87715e6cbf2715e25a39d845f8731bef99603aa5877625a3b0c90c9a1716bf\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c611f9f610052600039600081816104c40152818161054e0152818161061c015281816106a101526107620152611f9f6000f3fe6080604052600436106101805760003560e01c8063819e3431116100d6578063dd924acd1161007f578063f2fde38b11610059578063f2fde38b14610432578063f5a8f9df14610452578063fc0c546a1461046757600080fd5b8063dd924acd146103dc578063f000999e146103fc578063f18876841461041c57600080fd5b8063a87430ba116100b0578063a87430ba1461034f578063a8aa1b31146103a6578063aafb7aaa146103c657600080fd5b8063819e3431146102f15780638da5cb5b14610311578063a59f3e0c1461032f57600080fd5b806357fb25cc11610138578063715018a611610112578063715018a614610284578063727d0f351461029957806374e7493b146102d157600080fd5b806357fb25cc1461022d57806358b082541461024d57806367dfd4c91461026457600080fd5b80633659cfe6116101695780633659cfe6146101e35780634f1ef2861461020557806352d1902d1461021857600080fd5b80630ab4179e146101855780632c4e722e146101bf575b600080fd5b34801561019157600080fd5b506101a56101a0366004611c20565b610487565b604080519283526020830191909152015b60405180910390f35b3480156101cb57600080fd5b506101d560cc5481565b6040519081526020016101b6565b3480156101ef57600080fd5b506102036101fe366004611c20565b6104b9565b005b610203610213366004611cd2565b610611565b34801561022457600080fd5b506101d5610755565b34801561023957600080fd5b50610203610248366004611c7c565b61081a565b34801561025957600080fd5b506101d56201518081565b34801561027057600080fd5b506101d561027f366004611e15565b610954565b34801561029057600080fd5b50610203610be6565b3480156102a557600080fd5b5060ca546102b9906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b3480156102dd57600080fd5b506102036102ec366004611e15565b610c4c565b3480156102fd57600080fd5b506101d561030c366004611e15565b610cf6565b34801561031d57600080fd5b506097546001600160a01b03166102b9565b34801561033b57600080fd5b5061020361034a366004611e15565b610ebf565b34801561035b57600080fd5b5061038b61036a366004611c20565b60cf6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101b6565b3480156103b257600080fd5b5060c9546102b9906001600160a01b031681565b3480156103d257600080fd5b506101d560ce5481565b3480156103e857600080fd5b506102036103f7366004611e15565b611097565b34801561040857600080fd5b50610203610417366004611c3a565b611139565b34801561042857600080fd5b506101d560cd5481565b34801561043e57600080fd5b5061020361044d366004611c20565b6111dd565b34801561045e57600080fd5b506101d56112a5565b34801561047357600080fd5b5060cb546102b9906001600160a01b031681565b6001600160a01b038116600090815260cf60205260408120548190816104ad85836113e6565b91959194509092505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561054c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661057e611468565b6001600160a01b0316146105e95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610543565b6105f28161149b565b6040805160008082526020820190925261060e918391906114f5565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561069f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610543565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d1611468565b6001600160a01b03161461073c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610543565b6107458261149b565b610751828260016114f5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610543565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054610100900460ff166108355760005460ff1615610839565b303b155b6108ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610543565b600054610100900460ff161580156108cd576000805461ffff19166101011790555b6108d56116a9565b6108dd61171c565b6108e633611787565b60cb80546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca805488841690831617905560cc86905560cd85905560c9805492851692909116919091179055801561094c576000805461ff00191690555b505050505050565b33600090815260cf6020526040812080548311156109da5760405162461bcd60e51b815260206004820152602a60248201527f53686172652063616e6e6f74206265206d6f7265207468616e2063757272656e60448201527f74206465706f73697473000000000000000000000000000000000000000000006064820152608401610543565b60cd54831015610a525760405162461bcd60e51b815260206004820152603a60248201527f576974686472617720616d6f756e742073686f756c64206265206d6f7265207460448201527f68616e20746865206d696e696d756d2072657120616d6f756e740000000000006064820152608401610543565b6000610a618260000154610cf6565b90506000610a6f33836113e6565b600060028501558354909150610a858682611ed3565b845542600185015560cb546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018890526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610af257600080fd5b505af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611d8f565b5060ca546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610b7757600080fd5b505af1158015610b8b573d6000803e3d6000fd5b505085546001870154604080518681526020810193909352820186905260608201527facd2663d7282bc59d0af0910b598461a6c6d814474a74ea3016964bf9e90fee89250608001905060405180910390a150949350505050565b6097546001600160a01b03163314610c405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b610c4a60006117db565b565b6097546001600160a01b03163314610ca65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60cc805490829055604080518281526020810184905242918101919091527f81ba4195dc5019444883188177b0c70ab0b3d487423c78334e14bfdab3b8c91b906060015b60405180910390a15050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190611daf565b905060008111610df75760405162461bcd60e51b815260206004820152603260248201527f50616972206861732030206c69717569646974792e20556e61626c6520746f2060448201527f63616c63756c61746520696e74657265737400000000000000000000000000006064820152608401610543565b60c954604080517f0902f1ac00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630902f1ac916004808301926060929190829003018186803b158015610e5557600080fd5b505afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611dc7565b506dffffffffffffffffffffffffffff169150829050610ead8286611eb4565b610eb79190611e94565b949350505050565b600060cd54821015610f395760405162461bcd60e51b815260206004820152603860248201527f5374616b6520616d6f756e742073686f756c642062652067726561746572207460448201527f68616e206d696e696d756d207374616b6520616d6f756e7400000000000000006064820152608401610543565b33600090815260cf60205260409020805415610f8657805491506000610f5e83610cf6565b90506000610f6c33836113e6565b9050808360020154610f7e9190611e7c565b600284015550505b8054610f93908490611e7c565b815542600182015560cb546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190611d8f565b5080546002820154600183015460408051868152602081019490945283019190915260608201527fc362164f26ac3ef7417d18d603aabb747e63bec6f911a8eb0a5dadf302773b4d9060800160405180910390a1505050565b6097546001600160a01b031633146110f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60cd805490829055604080518281526020810184905242918101919091527fce08ad836776d738b5c6b8b40743e4e2e7d7888d8851407b86a3ec407efba17590606001610cea565b6097546001600160a01b031633146111935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60ca805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039485161790915560cb805482169484169490941790935560c980549093169116179055565b6097546001600160a01b031633146112375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6001600160a01b03811661129c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b61060e816117db565b33600090815260cf6020526040812080546113025760405162461bcd60e51b815260206004820152601460248201527f5573657220686173206e6f206465706f736974730000000000000000000000006044820152606401610543565b60006113118260000154610cf6565b9050600061131f33836113e6565b6000600285015542600185015560ca546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505084546001860154604080518381526020810193909352820185905260608201527facd2663d7282bc59d0af0910b598461a6c6d814474a74ea3016964bf9e90fee89250608001905060405180910390a19392505050565b6001600160a01b038216600090815260cf602052604081206001810154829062015180906114149042611ed3565b61141e9190611e94565b905060006237b1d060cc5483876114359190611eb4565b61143f9190611eb4565b6114499190611e94565b9050600081846002015461145d9190611e7c565b979650505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b6097546001600160a01b0316331461060e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561152d576115288361183a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156657600080fd5b505afa925050508015611596575060408051601f3d908101601f1916820190925261159391810190611daf565b60015b6116085760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610543565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461169d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610543565b50611528838383611908565b600054610100900460ff166117145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b610c4a611933565b600054610100900460ff16610c4a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6117b06119a7565b604080516001600160a01b03928316815291841660208301520160405180910390a161060e816119cf565b609780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381163b6118b75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610543565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b61191183611a5b565b60008251118061191e5750805b156115285761192d8383611a9b565b50505050565b600054610100900460ff1661199e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b610c4a336117db565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361148c565b6001600160a01b038116611a345760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036118da565b611a648161183a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611b1a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610543565b600080846001600160a01b031684604051611b359190611e2d565b600060405180830381855af49150503d8060008114611b70576040519150601f19603f3d011682016040523d82523d6000602084013e611b75565b606091505b5091509150611b9d8282604051806060016040528060278152602001611f4360279139611ba6565b95945050505050565b60608315611bb5575081611bdf565b825115611bc55782518084602001fd5b8160405162461bcd60e51b81526004016105439190611e49565b9392505050565b80356001600160a01b0381168114611bfd57600080fd5b919050565b80516dffffffffffffffffffffffffffff81168114611bfd57600080fd5b600060208284031215611c31578081fd5b611bdf82611be6565b600080600060608486031215611c4e578182fd5b611c5784611be6565b9250611c6560208501611be6565b9150611c7360408501611be6565b90509250925092565b600080600080600060a08688031215611c93578081fd5b611c9c86611be6565b9450611caa60208701611be6565b93506040860135925060608601359150611cc660808701611be6565b90509295509295909350565b60008060408385031215611ce4578182fd5b611ced83611be6565b9150602083013567ffffffffffffffff80821115611d09578283fd5b818501915085601f830112611d1c578283fd5b813581811115611d2e57611d2e611f2c565b604051601f8201601f19908116603f01168101908382118183101715611d5657611d56611f2c565b81604052828152886020848701011115611d6e578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215611da0578081fd5b81518015158114611bdf578182fd5b600060208284031215611dc0578081fd5b5051919050565b600080600060608486031215611ddb578283fd5b611de484611c02565b9250611df260208501611c02565b9150604084015163ffffffff81168114611e0a578182fd5b809150509250925092565b600060208284031215611e26578081fd5b5035919050565b60008251611e3f818460208701611eea565b9190910192915050565b6020815260008251806020840152611e68816040850160208701611eea565b601f01601f19169190910160400192915050565b60008219821115611e8f57611e8f611f16565b500190565b600082611eaf57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ece57611ece611f16565b500290565b600082821015611ee557611ee5611f16565b500390565b60005b83811015611f05578181015183820152602001611eed565b8381111561192d5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220324c2c693cb7d1958714a3dd518c44b3fde2a621e9d4e47de4fe369dd0c2caba64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101805760003560e01c8063819e3431116100d6578063dd924acd1161007f578063f2fde38b11610059578063f2fde38b14610432578063f5a8f9df14610452578063fc0c546a1461046757600080fd5b8063dd924acd146103dc578063f000999e146103fc578063f18876841461041c57600080fd5b8063a87430ba116100b0578063a87430ba1461034f578063a8aa1b31146103a6578063aafb7aaa146103c657600080fd5b8063819e3431146102f15780638da5cb5b14610311578063a59f3e0c1461032f57600080fd5b806357fb25cc11610138578063715018a611610112578063715018a614610284578063727d0f351461029957806374e7493b146102d157600080fd5b806357fb25cc1461022d57806358b082541461024d57806367dfd4c91461026457600080fd5b80633659cfe6116101695780633659cfe6146101e35780634f1ef2861461020557806352d1902d1461021857600080fd5b80630ab4179e146101855780632c4e722e146101bf575b600080fd5b34801561019157600080fd5b506101a56101a0366004611c20565b610487565b604080519283526020830191909152015b60405180910390f35b3480156101cb57600080fd5b506101d560cc5481565b6040519081526020016101b6565b3480156101ef57600080fd5b506102036101fe366004611c20565b6104b9565b005b610203610213366004611cd2565b610611565b34801561022457600080fd5b506101d5610755565b34801561023957600080fd5b50610203610248366004611c7c565b61081a565b34801561025957600080fd5b506101d56201518081565b34801561027057600080fd5b506101d561027f366004611e15565b610954565b34801561029057600080fd5b50610203610be6565b3480156102a557600080fd5b5060ca546102b9906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b3480156102dd57600080fd5b506102036102ec366004611e15565b610c4c565b3480156102fd57600080fd5b506101d561030c366004611e15565b610cf6565b34801561031d57600080fd5b506097546001600160a01b03166102b9565b34801561033b57600080fd5b5061020361034a366004611e15565b610ebf565b34801561035b57600080fd5b5061038b61036a366004611c20565b60cf6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101b6565b3480156103b257600080fd5b5060c9546102b9906001600160a01b031681565b3480156103d257600080fd5b506101d560ce5481565b3480156103e857600080fd5b506102036103f7366004611e15565b611097565b34801561040857600080fd5b50610203610417366004611c3a565b611139565b34801561042857600080fd5b506101d560cd5481565b34801561043e57600080fd5b5061020361044d366004611c20565b6111dd565b34801561045e57600080fd5b506101d56112a5565b34801561047357600080fd5b5060cb546102b9906001600160a01b031681565b6001600160a01b038116600090815260cf60205260408120548190816104ad85836113e6565b91959194509092505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561054c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661057e611468565b6001600160a01b0316146105e95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610543565b6105f28161149b565b6040805160008082526020820190925261060e918391906114f5565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561069f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610543565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d1611468565b6001600160a01b03161461073c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610543565b6107458261149b565b610751828260016114f5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610543565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054610100900460ff166108355760005460ff1615610839565b303b155b6108ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610543565b600054610100900460ff161580156108cd576000805461ffff19166101011790555b6108d56116a9565b6108dd61171c565b6108e633611787565b60cb80546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca805488841690831617905560cc86905560cd85905560c9805492851692909116919091179055801561094c576000805461ff00191690555b505050505050565b33600090815260cf6020526040812080548311156109da5760405162461bcd60e51b815260206004820152602a60248201527f53686172652063616e6e6f74206265206d6f7265207468616e2063757272656e60448201527f74206465706f73697473000000000000000000000000000000000000000000006064820152608401610543565b60cd54831015610a525760405162461bcd60e51b815260206004820152603a60248201527f576974686472617720616d6f756e742073686f756c64206265206d6f7265207460448201527f68616e20746865206d696e696d756d2072657120616d6f756e740000000000006064820152608401610543565b6000610a618260000154610cf6565b90506000610a6f33836113e6565b600060028501558354909150610a858682611ed3565b845542600185015560cb546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018890526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610af257600080fd5b505af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611d8f565b5060ca546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610b7757600080fd5b505af1158015610b8b573d6000803e3d6000fd5b505085546001870154604080518681526020810193909352820186905260608201527facd2663d7282bc59d0af0910b598461a6c6d814474a74ea3016964bf9e90fee89250608001905060405180910390a150949350505050565b6097546001600160a01b03163314610c405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b610c4a60006117db565b565b6097546001600160a01b03163314610ca65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60cc805490829055604080518281526020810184905242918101919091527f81ba4195dc5019444883188177b0c70ab0b3d487423c78334e14bfdab3b8c91b906060015b60405180910390a15050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190611daf565b905060008111610df75760405162461bcd60e51b815260206004820152603260248201527f50616972206861732030206c69717569646974792e20556e61626c6520746f2060448201527f63616c63756c61746520696e74657265737400000000000000000000000000006064820152608401610543565b60c954604080517f0902f1ac00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630902f1ac916004808301926060929190829003018186803b158015610e5557600080fd5b505afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611dc7565b506dffffffffffffffffffffffffffff169150829050610ead8286611eb4565b610eb79190611e94565b949350505050565b600060cd54821015610f395760405162461bcd60e51b815260206004820152603860248201527f5374616b6520616d6f756e742073686f756c642062652067726561746572207460448201527f68616e206d696e696d756d207374616b6520616d6f756e7400000000000000006064820152608401610543565b33600090815260cf60205260409020805415610f8657805491506000610f5e83610cf6565b90506000610f6c33836113e6565b9050808360020154610f7e9190611e7c565b600284015550505b8054610f93908490611e7c565b815542600182015560cb546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190611d8f565b5080546002820154600183015460408051868152602081019490945283019190915260608201527fc362164f26ac3ef7417d18d603aabb747e63bec6f911a8eb0a5dadf302773b4d9060800160405180910390a1505050565b6097546001600160a01b031633146110f15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60cd805490829055604080518281526020810184905242918101919091527fce08ad836776d738b5c6b8b40743e4e2e7d7888d8851407b86a3ec407efba17590606001610cea565b6097546001600160a01b031633146111935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b60ca805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039485161790915560cb805482169484169490941790935560c980549093169116179055565b6097546001600160a01b031633146112375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b6001600160a01b03811661129c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b61060e816117db565b33600090815260cf6020526040812080546113025760405162461bcd60e51b815260206004820152601460248201527f5573657220686173206e6f206465706f736974730000000000000000000000006044820152606401610543565b60006113118260000154610cf6565b9050600061131f33836113e6565b6000600285015542600185015560ca546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505084546001860154604080518381526020810193909352820185905260608201527facd2663d7282bc59d0af0910b598461a6c6d814474a74ea3016964bf9e90fee89250608001905060405180910390a19392505050565b6001600160a01b038216600090815260cf602052604081206001810154829062015180906114149042611ed3565b61141e9190611e94565b905060006237b1d060cc5483876114359190611eb4565b61143f9190611eb4565b6114499190611e94565b9050600081846002015461145d9190611e7c565b979650505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b6097546001600160a01b0316331461060e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561152d576115288361183a565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156657600080fd5b505afa925050508015611596575060408051601f3d908101601f1916820190925261159391810190611daf565b60015b6116085760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610543565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461169d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610543565b50611528838383611908565b600054610100900460ff166117145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b610c4a611933565b600054610100900460ff16610c4a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6117b06119a7565b604080516001600160a01b03928316815291841660208301520160405180910390a161060e816119cf565b609780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381163b6118b75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610543565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b61191183611a5b565b60008251118061191e5750805b156115285761192d8383611a9b565b50505050565b600054610100900460ff1661199e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610543565b610c4a336117db565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361148c565b6001600160a01b038116611a345760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036118da565b611a648161183a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611b1a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610543565b600080846001600160a01b031684604051611b359190611e2d565b600060405180830381855af49150503d8060008114611b70576040519150601f19603f3d011682016040523d82523d6000602084013e611b75565b606091505b5091509150611b9d8282604051806060016040528060278152602001611f4360279139611ba6565b95945050505050565b60608315611bb5575081611bdf565b825115611bc55782518084602001fd5b8160405162461bcd60e51b81526004016105439190611e49565b9392505050565b80356001600160a01b0381168114611bfd57600080fd5b919050565b80516dffffffffffffffffffffffffffff81168114611bfd57600080fd5b600060208284031215611c31578081fd5b611bdf82611be6565b600080600060608486031215611c4e578182fd5b611c5784611be6565b9250611c6560208501611be6565b9150611c7360408501611be6565b90509250925092565b600080600080600060a08688031215611c93578081fd5b611c9c86611be6565b9450611caa60208701611be6565b93506040860135925060608601359150611cc660808701611be6565b90509295509295909350565b60008060408385031215611ce4578182fd5b611ced83611be6565b9150602083013567ffffffffffffffff80821115611d09578283fd5b818501915085601f830112611d1c578283fd5b813581811115611d2e57611d2e611f2c565b604051601f8201601f19908116603f01168101908382118183101715611d5657611d56611f2c565b81604052828152886020848701011115611d6e578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215611da0578081fd5b81518015158114611bdf578182fd5b600060208284031215611dc0578081fd5b5051919050565b600080600060608486031215611ddb578283fd5b611de484611c02565b9250611df260208501611c02565b9150604084015163ffffffff81168114611e0a578182fd5b809150509250925092565b600060208284031215611e26578081fd5b5035919050565b60008251611e3f818460208701611eea565b9190910192915050565b6020815260008251806020840152611e68816040850160208701611eea565b601f01601f19169190910160400192915050565b60008219821115611e8f57611e8f611f16565b500190565b600082611eaf57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ece57611ece611f16565b500290565b600082821015611ee557611ee5611f16565b500390565b60005b83811015611f05578181015183820152602001611eed565b8381111561192d5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220324c2c693cb7d1958714a3dd518c44b3fde2a621e9d4e47de4fe369dd0c2caba64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateEquivalenceInBold(uint256)": {
        "details": "calculate Bold equivalence of LP token using LiquidiyPool information",
        "params": {
          "lpAmount": "LP amount to transform in bold"
        },
        "returns": {
          "_0": "equivalent bold amount Transforms LP to bold taken into consideration LP supply EXAMPLE:   LP amount = 5000 LP tokens (you have staked)   Max supply= 1000,0000 LP Tokens (you control 0.5% of all LP tokens [5000])   Bold supply in LP Pool: 100,000 Bold tokens (calculations will use 0,5% of these tokens 500) So lpAmount (5000) -----> boldAmount(500)"
        }
      },
      "changeRate(uint256)": {
        "details": "Change interest rate ",
        "params": {
          "_rate": "new interestrate (2000 =>20%)"
        }
      },
      "initialize(address,address,uint256,uint256,address)": {
        "details": "initialize function",
        "params": {
          "_bold": "Token to pay earnings",
          "_minAmount": "Minimun amount allowed to stake",
          "_rate": "intetest (20% =>2000)",
          "_token": "Token used to stake"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 519,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 522,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 501,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 721,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2116,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9977,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "pair",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 9979,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "bold",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 9981,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "token",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 9983,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "rate",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 9985,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 9994,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "NEWFIELD",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 9537,
        "contract": "contracts/OFLPStaking.sol:OFLPStaking",
        "label": "users",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_struct(UserInfo)9532_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)9532_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OFLPStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9532_storage"
      },
      "t_struct(UserInfo)9532_storage": {
        "encoding": "inplace",
        "label": "struct OFLPStaking.UserInfo",
        "members": [
          {
            "astId": 9527,
            "contract": "contracts/OFLPStaking.sol:OFLPStaking",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9529,
            "contract": "contracts/OFLPStaking.sol:OFLPStaking",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9531,
            "contract": "contracts/OFLPStaking.sol:OFLPStaking",
            "label": "interestAccumulated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}