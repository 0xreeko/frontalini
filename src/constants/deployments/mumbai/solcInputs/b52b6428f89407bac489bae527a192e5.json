{
  "language": "Solidity",
  "sources": {
    "contracts/BoldToken.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"./BoldTokenStorage.sol\";\r\n\r\n/*\r\nBOLD Token : Is our company's token, that will be used to place bets against the house. \r\nThe rights to burn and mint this token is provided to only \"Allowed contracts\". Such contracts\r\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \r\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \r\nor burn these tokens.\r\n*/\r\n\r\ncontract BoldToken is \r\nInitializable,\r\nUUPSUpgradeable,\r\nERC20Upgradeable,\r\nOwnableUpgradeable,\r\nBoldTokenStorage\r\n{\r\n\r\n  event AdminUpdated(address _admin);\r\n\r\n    //Proxy Functions\r\n     /** @dev initialize proxied contract.\r\n     */\r\n     function initialize() public initializer {\r\n        __Ownable_init();\r\n          __UUPSUpgradeable_init();\r\n         __ERC20_init(\"BOLD TOKEN\", \"BOLD\");\r\n         _changeAdmin(msg.sender);\r\n\r\n       _mint(msg.sender, 100000000000000000000000000000000);\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n  modifier onlyAllowedContracts(){\r\n    require(isAllowedContract(msg.sender),\"BoldToken - This address is not allowed\");\r\n     _;\r\n  }\r\n\r\n  function mint(address to, uint amount) external onlyAllowedContracts {\r\n    _mint(to, amount);\r\n  }\r\n  \r\n\r\n  function burn(address owner, uint amount) external onlyAllowedContracts {\r\n    _burn(owner, amount);\r\n  }\r\n\r\n  function allowContract(address _contract)  external  onlyOwner{\r\n      allowedcontracts[_contract]=true;\r\n    }\r\n\r\n  function disAllowContract(address _contract)  external onlyOwner{\r\n    allowedcontracts[_contract]=false;\r\n  }\r\n\r\n  function isAllowedContract(address _contract) public view returns(bool){\r\n    if(allowedcontracts[_contract]==true){\r\n        return true;\r\n    }\r\n    return false;\r\n    }\r\n\r\n  function updateAdmin(address newAdmin) external onlyOwner {\r\n   transferOwnership(newAdmin);\r\n  }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/BoldTokenStorage.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n/*\r\nBOLD Token : Is our company's token, that will be used to place bets against the house. \r\nThe rights to burn and mint this token is provided to only \"Allowed contracts\". Such contracts\r\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \r\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \r\nor burn these tokens.\r\n*/\r\n\r\ncontract BoldTokenStorage  {\r\n  \r\n  mapping(address =>bool) allowedcontracts;\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/testProxy/ProxyTestRouter.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"../BoldToken.sol\";\r\nimport \"../IRouter.sol\";\r\nimport \"./ProxyTestRouterStorage.sol\";\r\nimport \"../IEquivalence.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\n\r\n/** @title Router contract */\r\ncontract ProxyTestRouter is \r\nIRouter, \r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nProxyTestRouterStorage\r\n{\r\n\r\n     //Proxy Functions\r\n\r\n     function initialize(address _equivalenceContract) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        equivalenceContract=_equivalenceContract;\r\n        treasuryFee=50;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n   \r\n    modifier onlyAllowedContracts(){\r\n        require(isAllowedContract(msg.sender),\"onlyAllowedContracts: This address is not allowed\");\r\n        _;\r\n    } \r\n\r\n    modifier  notBlackListed(address _addr){\r\n         require(!isInBlackList(_addr),\"BlackList: Address is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Configure percentage of treasury that are sent to treasury wallet. Remaining would be transfered to tx wallet\r\n    * @param  value percentage to send to treasury wallet (50%-> value=50)\r\n     */\r\n    function setTreasuryFee(uint256 value) external onlyOwner{\r\n        require(value<=100,\"Router - treasury fee cannot be greater than 100 (100%)\");\r\n        treasuryFee = value;\r\n    }\r\n\r\n    function setPredictionToken(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        bold = _addr;\r\n    }\r\n\r\n    function setTreasuryToken(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        treasuryToken = _addr;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter for TxFeeWallet\r\n    * @return TX Fee Wallet\r\n     */\r\n    function getTxFeeWallet() external override view returns(address){\r\n        return txFeeWallet;\r\n    }\r\n\r\n    function setTxFeeWallet(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        txFeeWallet = _addr;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter for treasuryWallet\r\n    * @return Treasury Wallet\r\n     */\r\n    function getTreasuryWallet() external override view returns(address){\r\n        return treasuryWallet;\r\n    }\r\n\r\n    function setTreasuryWallet(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        treasuryWallet = _addr;\r\n    }\r\n\r\n\r\n    function allowContract(address _contract)  external  onlyOwner{\r\n        allowedcontracts[_contract]=true;\r\n        emit contractAllowed(_contract,true);\r\n    }\r\n\r\n    function disAllowContract(address _contract)  external  onlyOwner{\r\n        allowedcontracts[_contract]=false;\r\n        emit contractDisallowed(_contract,false);\r\n    }\r\n\r\n    function isAllowedContract(address _contract) public view returns(bool){\r\n        return allowedcontracts[_contract];\r\n    }\r\n\r\n\r\n    //BLACKLIST OPERATIONS\r\n\r\n    /**\r\n        @dev Add a new address to black list\r\n        @notice if address was previosly banned, nothing happens\r\n        @param _banned address to be banned\r\n     */\r\n    function addToBlackList(address _banned)  override external  onlyOwner{\r\n        require(_banned!=address(this),\"Router cannot be banned\");\r\n        if(!blackList[_banned]){\r\n            blackList[_banned]=true;\r\n            emit blackListEvent(_banned,true);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Add a new address to black list\r\n        @notice if address was not previosly banned, nothing happens\r\n        @param _unbanned address to be unbanned\r\n     */\r\n    function removeFromBlackList(address _unbanned)  override external onlyOwner {\r\n        if(blackList[_unbanned]){\r\n            blackList[_unbanned]=false;\r\n            emit blackListEvent(_unbanned,false);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Check if address is blacklisted\r\n        @param _address address to check if it is blacklisted\r\n        @return true if address is blackListed\r\n     */\r\n    function isInBlackList(address _address)  override view public returns(bool){\r\n        return blackList[_address];\r\n    }\r\n\r\n\r\n    // ************************************************\r\n    // PAYMENT OPERTATIONS\r\n    // ************************************************\r\n    \r\n    /*This function is called by Coin Toss P2P and Predictions P2P while placing the bets. It transfers the bet amount in WETH token from \r\n      User to this router */ \r\n    \r\n    function payment(address _token, address _from, uint _amount) override external onlyAllowedContracts notBlackListed(_from) returns(uint result){\r\n        IERC20(_token).transferFrom(_from, address(this), _amount);\r\n    }\r\n\r\n    /*This function is called by Coin Toss House and Predictions House while placing the bets. It transfers the BOLD token from User to this router \r\n      contract and burn the ammount*/\r\n\r\n    function transferAndBurn(address _token, address _from, uint _amount,uint treasuryfee) override external onlyAllowedContracts notBlackListed(_from) returns(uint result){\r\n        IERC20(_token).transferFrom(_from, address(this), _amount);\r\n        BoldToken(_token).burn(address(this), _amount);\r\n    }\r\n\r\n    /*This function is called by the claim() method in Coin Toss P2P and Predictions P2P to sette the bets. It transfers the amount won by the user  \r\n      in WETH token to the user from this router */\r\n      \r\n    function profit(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to) returns(uint result){\r\n        IERC20(_token).transfer( _to, _amount);   \r\n    }\r\n    \r\n    /*This function is called by the claim() method in Coin Toss House and Predictions House to sette the bets. It mints the amount won by the user  \r\n      in BOLD token to the user address */\r\n      \r\n    function mint(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to) returns(uint result){\r\n        BoldToken(_token).mint(_to, _amount);\r\n    } \r\n    \r\n    \r\n       \r\n    /*This function is called by Coin Toss House and Predictions House. Both these contracts gather commission from the users \r\n      that are placing the bets in the form of BOLD TOKEN. By Design, this method will burn the commission fees held in BOLD by the router,\r\n      and transfer an equivalent amount of WETH to the company treasury. The BOLD-WETH ratio is calculated by the equivalence formula, that \r\n      is not fixed and is routinely changed */\r\n\r\n    function tokenToWeth(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to)  returns(uint result){\r\n        BoldToken(_token).burn(address(this), _amount);        \r\n        uint _amt = calculateEquivalenceFromBold(_token,_to,_amount);\r\n        IERC20(treasuryToken).transfer(treasuryWallet, _amt);\r\n    }\r\n    \r\n     /*This function is called by Coin Toss P2P and Predictions P2P contracts. Whenever user places bet using these contracts using WETH token,\r\n       it is minted a certain amount of BOLD token as a bonus */\r\n    \r\n    function bonusPayment(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to)  returns(uint result){\r\n        uint _amt = calculateEquivalenceToBold(_token,_to,_amount);\r\n        BoldToken(bold).mint(_to, _amt);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate treasury fees for each treasury wallet\r\n    * @param _amount Amount in Matic to distribute\r\n    * @return _treasuryAmount amount corresponding to treasury wallet\r\n    * @return _txFeeAmount amount corresponding to tx wallet\r\n     */\r\n    function calculateTreasuryFees(uint _amount) external override view returns(uint _treasuryAmount, uint _txFeeAmount){\r\n        uint _amountTreasury=_amount*treasuryFee/100;\r\n        return(\r\n            _amountTreasury,\r\n            _amount-_amountTreasury\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // ************************************************\r\n    // EMIT CENTRALIZED EVENTS\r\n    // ************************************************\r\n    /**\r\n        @dev emit an event on behalf of other contract\r\n        @param _type type of event\r\n        @param _caller contract which emits event\r\n        @param _sender User address which has bet or claim\r\n        @param _epoch round in which the event has been emitted\r\n        @param _amount amount of token transfered\r\n\r\n     */\r\n    function emitEvent(uint _type, address _caller, address _sender, uint256 _epoch, uint _amount) override external onlyAllowedContracts {\r\n        emit betEvent(_type,_caller,_sender,_epoch,_amount,block.timestamp);\r\n    }\r\n\r\n    // ************************************************\r\n    // EQUIVALENCE FUNCTIONALITY\r\n    // ************************************************\r\n    /**\r\n        @dev calculate equivalence in BOLD token\r\n        @param _token token to convert\r\n        @param _user  user request the equivalence\r\n        @param _amount Amout to convert\r\n        @return amount in Bold\r\n     */\r\n    function calculateEquivalenceToBold(address _token, address _user, uint _amount) public  override view returns(uint){\r\n        return IEquivalence(equivalenceContract).calculateToBold(_token, _user, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev calculate equivalence of BOLD in token\r\n        @param _token token to convert\r\n        @param _user  user request the equivalence\r\n        @param _amount Amout to convert\r\n        @return amount in token\r\n     */\r\n    function calculateEquivalenceFromBold(address _token, address _user, uint _amount) public  override view returns(uint){\r\n        return IEquivalence(equivalenceContract).calculateFromBold(_token, _user, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Change token equivalence contract\r\n        @param newEquivalence new Equivalence contract\r\n     */\r\n    function changeEquivalence(address newEquivalence) public onlyOwner{\r\n        equivalenceContract=newEquivalence;\r\n    }\r\n\r\n    //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n \r\n}\r\n"
    },
    "contracts/IRouter.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n\r\n/** @title BlackList contract */\r\ninterface IRouter {\r\n    function addToBlackList(address _banned) external;\r\n    function removeFromBlackList(address _unbanned) external;\r\n    function isInBlackList(address _address) view external returns(bool);\r\n\r\n    function payment(address _token, address _from, uint _amount) external returns(uint result);\r\n    function bonusPayment(address _token, address _to, uint _amount) external returns(uint result);\r\n    function profit(address _token, address _to, uint _amount) external returns(uint result);\r\n    function transferAndBurn(address _token, address _from, uint _amount, uint treasuryFee) external returns(uint result);\r\n    function mint(address _token, address _to, uint _amount) external returns(uint result);\r\n    function tokenToWeth(address _token,address _to, uint _amount) external returns(uint result);\r\n\r\n    function emitEvent(uint _type, address _caller, address _sender, uint256 epoch, uint _amount) external;\r\n    function calculateEquivalenceToBold(address _token, address user, uint amount) external view returns(uint);\r\n    function calculateEquivalenceFromBold(address _token, address user, uint amount) external view returns(uint);\r\n\r\n    function calculateTreasuryFees(uint _amount) external view returns(uint _treasuryAmount, uint _txFeeAmount);\r\n    function getTxFeeWallet() external view returns(address);\r\n    function getTreasuryWallet() external view returns(address);\r\n\r\n    event blackListEvent(address indexed _address,bool banned);\r\n    event contractAllowed(address _contract,bool allowed);\r\n    event contractDisallowed(address _contract,bool allowed);\r\n    event betEvent(uint indexed _type, address indexed  _caller, address _sender, uint256 indexed _epoch, uint _amount, uint timestamp);\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestRouterStorage.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n/** @title Router contract */\r\ncontract ProxyTestRouterStorage{\r\n    mapping(address => bool) blackList;\r\n    mapping(address =>bool) allowedcontracts;\r\n    uint256 public treasuryFee;\r\n    address public treasuryToken;\r\n    address public bold;\r\n    address public txFeeWallet;\r\n    address public treasuryWallet;\r\n    address public equivalenceContract; \r\n    // New field\r\n    uint256 public NEWFIELD;\r\n}\r\n"
    },
    "contracts/IEquivalence.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n\r\n\r\n/** @title Equivalence Interface */\r\ninterface IEquivalence {\r\n    function calculateToBold(address _token, address _to,uint _amount) external view returns(uint) ;\r\n    function calculateFromBold(address _token, address _to,uint _amount) external view returns(uint) ;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/testProxy/ProxyTestOFStakingStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"../BoldToken.sol\";\r\n/* \r\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\r\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \r\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \r\n*/\r\n\r\ncontract ProxyTestOFStakingStorage {\r\n\r\n    BoldToken public bold; // reward token address\r\n    IERC20 public token;   // staking token address\r\n    uint256 public rate;          // amount of reward token per 10000 of staking token \r\n    uint256 public minStakeAmount;// minimum amount that can be staked in wei \r\n\r\n    uint constant public SECSINDAY=60*60*24;\r\n\r\n    struct UserInfo {\r\n        uint256 balance;        \r\n        uint256 timestamp;\r\n        uint256 interestAccumulated;\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n\r\n    uint256 public NEWFIELD;\r\n\r\n  \r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OFStakingStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./BoldToken.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/* \r\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\r\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \r\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \r\n*/\r\n\r\ncontract OFStakingStorage {\r\n\r\n    BoldToken public bold; // reward token address\r\n    IERC20 public token;   // staking token address\r\n    uint256 public rate;          // amount of reward token per 10000 of staking token \r\n    uint256 public minStakeAmount;// minimum amount that can be staked in wei \r\n\r\n    uint constant public SECSINDAY=60*60*24;\r\n\r\n    struct UserInfo {\r\n        uint256 balance;        \r\n        uint256 timestamp;\r\n        uint256 interestAccumulated;\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n\r\n  \r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/Router.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"./BoldToken.sol\";\r\nimport \"./IRouter.sol\";\r\nimport \"./RouterStorage.sol\";\r\nimport \"./IEquivalence.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n\r\n/** @title Router contract */\r\ncontract Router is \r\nIRouter, \r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nRouterStorage\r\n{\r\n\r\n     //Proxy Functions\r\n\r\n     function initialize(address _equivalenceContract) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        equivalenceContract=_equivalenceContract;\r\n        treasuryFee=50;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n   \r\n    modifier onlyAllowedContracts(){\r\n        require(isAllowedContract(msg.sender),\"onlyAllowedContracts: This address is not allowed\");\r\n        _;\r\n    } \r\n\r\n    modifier  notBlackListed(address _addr){\r\n         require(!isInBlackList(_addr),\"BlackList: Address is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Configure percentage of treasury that are sent to treasury wallet. Remaining would be transfered to tx wallet\r\n    * @param  value percentage to send to treasury wallet (50%-> value=50)\r\n     */\r\n    function setTreasuryFee(uint256 value) external onlyOwner{\r\n        require(value<=100,\"Router - treasury fee cannot be greater than 100 (100%)\");\r\n        treasuryFee = value;\r\n    }\r\n\r\n    function setPredictionToken(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        bold = _addr;\r\n    }\r\n\r\n    function setTreasuryToken(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        treasuryToken = _addr;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter for TxFeeWallet\r\n    * @return TX Fee Wallet\r\n     */\r\n    function getTxFeeWallet() external override view returns(address){\r\n        return txFeeWallet;\r\n    }\r\n\r\n    function setTxFeeWallet(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        txFeeWallet = _addr;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter for treasuryWallet\r\n    * @return Treasury Wallet\r\n     */\r\n    function getTreasuryWallet() external override view returns(address){\r\n        return treasuryWallet;\r\n    }\r\n\r\n    function setTreasuryWallet(address _addr) external onlyOwner{\r\n        require(_addr!=address(0),\"New address cannot be zero\");\r\n        treasuryWallet = _addr;\r\n    }\r\n\r\n\r\n    function allowContract(address _contract)  external  onlyOwner{\r\n        allowedcontracts[_contract]=true;\r\n        emit contractAllowed(_contract,true);\r\n    }\r\n\r\n    function disAllowContract(address _contract)  external  onlyOwner{\r\n        allowedcontracts[_contract]=false;\r\n        emit contractDisallowed(_contract,false);\r\n    }\r\n\r\n    function isAllowedContract(address _contract) public view returns(bool){\r\n        return allowedcontracts[_contract];\r\n    }\r\n\r\n\r\n    //BLACKLIST OPERATIONS\r\n\r\n    /**\r\n        @dev Add a new address to black list\r\n        @notice if address was previosly banned, nothing happens\r\n        @param _banned address to be banned\r\n     */\r\n    function addToBlackList(address _banned)  override external  onlyOwner{\r\n        require(_banned!=address(this),\"Router cannot be banned\");\r\n        if(!blackList[_banned]){\r\n            blackList[_banned]=true;\r\n            emit blackListEvent(_banned,true);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Add a new address to black list\r\n        @notice if address was not previosly banned, nothing happens\r\n        @param _unbanned address to be unbanned\r\n     */\r\n    function removeFromBlackList(address _unbanned)  override external onlyOwner {\r\n        if(blackList[_unbanned]){\r\n            blackList[_unbanned]=false;\r\n            emit blackListEvent(_unbanned,false);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Check if address is blacklisted\r\n        @param _address address to check if it is blacklisted\r\n        @return true if address is blackListed\r\n     */\r\n    function isInBlackList(address _address)  override view public returns(bool){\r\n        return blackList[_address];\r\n    }\r\n\r\n\r\n    // ************************************************\r\n    // PAYMENT OPERTATIONS\r\n    // ************************************************\r\n    \r\n    /*This function is called by Coin Toss P2P and Predictions P2P while placing the bets. It transfers the bet amount in WETH token from \r\n      User to this router */ \r\n    \r\n    function payment(address _token, address _from, uint _amount) override external onlyAllowedContracts notBlackListed(_from) returns(uint result){\r\n        IERC20(_token).transferFrom(_from, address(this), _amount);\r\n    }\r\n\r\n    /*This function is called by Coin Toss House and Predictions House while placing the bets. It transfers the BOLD token from User to this router \r\n      contract and burn the ammount*/\r\n\r\n    function transferAndBurn(address _token, address _from, uint _amount,uint treasuryfee) override external onlyAllowedContracts notBlackListed(_from) returns(uint result){\r\n        IERC20(_token).transferFrom(_from, address(this), _amount);\r\n        BoldToken(_token).burn(address(this), _amount);\r\n    }\r\n\r\n    /*This function is called by the claim() method in Coin Toss P2P and Predictions P2P to sette the bets. It transfers the amount won by the user  \r\n      in WETH token to the user from this router */\r\n      \r\n    function profit(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to) returns(uint result){\r\n        IERC20(_token).transfer( _to, _amount);   \r\n    }\r\n    \r\n    /*This function is called by the claim() method in Coin Toss House and Predictions House to sette the bets. It mints the amount won by the user  \r\n      in BOLD token to the user address */\r\n      \r\n    function mint(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to) returns(uint result){\r\n        BoldToken(_token).mint(_to, _amount);\r\n    } \r\n    \r\n    \r\n       \r\n    /*This function is called by Coin Toss House and Predictions House. Both these contracts gather commission from the users \r\n      that are placing the bets in the form of BOLD TOKEN. By Design, this method will burn the commission fees held in BOLD by the router,\r\n      and transfer an equivalent amount of WETH to the company treasury. The BOLD-WETH ratio is calculated by the equivalence formula, that \r\n      is not fixed and is routinely changed */\r\n\r\n    function tokenToWeth(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to)  returns(uint result){\r\n        BoldToken(_token).burn(address(this), _amount);        \r\n        uint _amt = calculateEquivalenceFromBold(_token,_to,_amount);\r\n        IERC20(treasuryToken).transfer(treasuryWallet, _amt);\r\n    }\r\n    \r\n     /*This function is called by Coin Toss P2P and Predictions P2P contracts. Whenever user places bet using these contracts using WETH token,\r\n       it is minted a certain amount of BOLD token as a bonus */\r\n    \r\n    function bonusPayment(address _token, address _to, uint _amount) override external onlyAllowedContracts notBlackListed(_to)  returns(uint result){\r\n        uint _amt = calculateEquivalenceToBold(_token,_to,_amount);\r\n        BoldToken(bold).mint(_to, _amt);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculate treasury fees for each treasury wallet\r\n    * @param _amount Amount in Matic to distribute\r\n    * @return _treasuryAmount amount corresponding to treasury wallet\r\n    * @return _txFeeAmount amount corresponding to tx wallet\r\n     */\r\n    function calculateTreasuryFees(uint _amount) external override view returns(uint _treasuryAmount, uint _txFeeAmount){\r\n        uint _amountTreasury=_amount*treasuryFee/100;\r\n        return(\r\n            _amountTreasury,\r\n            _amount-_amountTreasury\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // ************************************************\r\n    // EMIT CENTRALIZED EVENTS\r\n    // ************************************************\r\n    /**\r\n        @dev emit an event on behalf of other contract\r\n        @param _type type of event\r\n        @param _caller contract which emits event\r\n        @param _sender User address which has bet or claim\r\n        @param _epoch round in which the event has been emitted\r\n        @param _amount amount of token transfered\r\n\r\n     */\r\n    function emitEvent(uint _type, address _caller, address _sender, uint256 _epoch, uint _amount) override external onlyAllowedContracts {\r\n        emit betEvent(_type,_caller,_sender,_epoch,_amount,block.timestamp);\r\n    }\r\n\r\n    // ************************************************\r\n    // EQUIVALENCE FUNCTIONALITY\r\n    // ************************************************\r\n    /**\r\n        @dev calculate equivalence in BOLD token\r\n        @param _token token to convert\r\n        @param _user  user request the equivalence\r\n        @param _amount Amout to convert\r\n        @return amount in Bold\r\n     */\r\n    function calculateEquivalenceToBold(address _token, address _user, uint _amount) public  override view returns(uint){\r\n        return IEquivalence(equivalenceContract).calculateToBold(_token, _user, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev calculate equivalence of BOLD in token\r\n        @param _token token to convert\r\n        @param _user  user request the equivalence\r\n        @param _amount Amout to convert\r\n        @return amount in token\r\n     */\r\n    function calculateEquivalenceFromBold(address _token, address _user, uint _amount) public  override view returns(uint){\r\n        return IEquivalence(equivalenceContract).calculateFromBold(_token, _user, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev Change token equivalence contract\r\n        @param newEquivalence new Equivalence contract\r\n     */\r\n    function changeEquivalence(address newEquivalence) public onlyOwner{\r\n        equivalenceContract=newEquivalence;\r\n    }\r\n \r\n}\r\n"
    },
    "contracts/RouterStorage.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n/** @title Router contract */\r\ncontract RouterStorage{\r\n    mapping(address => bool) blackList;\r\n    mapping(address =>bool) allowedcontracts;\r\n    uint256 public treasuryFee;\r\n    address public treasuryToken;\r\n    address public bold;\r\n    address public txFeeWallet;\r\n    address public treasuryWallet;\r\n    address public equivalenceContract; \r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestEquivalenceFormula.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"../IEquivalence.sol\";\r\nimport \"./ProxyTestEquivalenceFormulaStorage.sol\";\r\n\r\n\r\n\r\n/** @title Equvalence contract: Calculates equivalence between a token and BOLD */\r\ncontract ProxyTestEquivalenceFormula is \r\nIEquivalence, \r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nProxyTestEquivalenceFormulaStorage\r\n{\r\n\r\n    //Proxy Functions\r\n\r\n     function initialize(\r\n        uint _priceRatio,\r\n        uint _ratio,\r\n        uint _decimals,\r\n        uint _kink1,\r\n        uint _A1,\r\n        uint _C1,\r\n         uint _kink2,\r\n        uint _A2,\r\n        uint _C2\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        priceRatio=_priceRatio;\r\n        ratio=_ratio;\r\n        decimals=_decimals;\r\n        kink1=_kink1;\r\n        A1=_A1;\r\n        C1=_C1;\r\n        kink2=_kink2;\r\n        A2=_A2;\r\n        C2=_C2;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n\r\n    /**\r\n     * @notice Set Price conversion ratio from weth to USD\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setPriceRatio(uint _value) public onlyOwner{\r\n        priceRatio=_value;\r\n    }\r\n\r\n\r\n     /**\r\n     * @notice Set conversion ratio\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setRatio(uint _value) public onlyOwner{\r\n        ratio=_value;\r\n    }\r\n\r\n     /**\r\n     * @notice Set decimals for parameters kink1, kink2, A1, A2, C1, C2\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setDecimals(uint _value) public onlyOwner{\r\n        decimals=_value;\r\n    }\r\n\r\n    function setKink1(uint _value) public onlyOwner{\r\n\t    kink1=_value;\r\n    }\r\n\r\n    function setKink2(uint _value) public onlyOwner{\r\n\t    kink2=_value;\r\n    }\r\n\r\n    function setA1(uint _value) public onlyOwner{\r\n\t    A1=_value;\r\n    }\r\n\r\n    function setA2(uint _value) public onlyOwner{\r\n\t    A2=_value;\r\n    }\r\n\r\n    function setC1(uint _value) public onlyOwner{\r\n\t    C1=_value;\r\n    }\r\n\r\n    function setC2(uint _value) public onlyOwner{\r\n\t    C2=_value;\r\n    }\r\n\r\n    function F0(uint amount, uint ratio) public view returns (uint){\r\n        // console.log(\"F0(%i)\",(amount));\r\n        return amount*ratio/(10**decimals);\r\n    }\r\n\r\n    function F1(uint amount, uint ratio, uint A, uint C) public view returns (uint){\r\n        // console.log(\"F1 - amount\",(amount));\r\n        // console.log(\"F1 - ratio\",(ratio));\r\n        // console.log(\"F1 - A\",(A));\r\n        // console.log(\"F1 - C\",(C));\r\n        uint item1=(amount*ratio*A)/((10**decimals)**2);\r\n        uint item2=item1+(C*10**18/10**3);\r\n        return item2;\r\n    }\r\n    \r\n    /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the toke. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in BOLD\r\n     * @return amount in bold\r\n     */\r\n    function calculateToBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        // console.log(\">>>> Amount /t\", _amount);\r\n        // console.log(\">>>> kink2: /t\",kink2);\r\n       uint convertedAmount=_amount*(10**decimals)/priceRatio;\r\n\r\n       if(convertedAmount <= kink1){\r\n        //console.log(\">>>> 1 \");\r\n           return F0(convertedAmount,ratio);\r\n       }else if(convertedAmount < kink2){\r\n           //console.log(\">>>> 2 \");\r\n           return F1(convertedAmount,ratio,A1,C1);\r\n       }else{\r\n           //console.log(\">>>> 3 \");\r\n           return F1(convertedAmount,ratio,A2,C2);\r\n       }\r\n                \r\n    }\r\n\r\n     /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the token. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in _token\r\n     * @return amount in bold\r\n     */\r\n    function calculateFromBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        return _amount;\r\n    }\r\n\r\n   // New param\r\n   function setNEWPARAM(uint _NEWPARAM) public {\r\n       NEWPARAM=_NEWPARAM;\r\n   }\r\n\r\n}"
    },
    "contracts/testProxy/ProxyTestEquivalenceFormulaStorage.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n\r\n/** @title Equvalence contract data : Used by EquivalenceFormula */\r\ncontract ProxyTestEquivalenceFormulaStorage{\r\n\r\n    // RATIO with 3 decimals. 1000000 equals to multiply by 1000\r\n    uint public priceRatio;\r\n    // RATIO with 3 decimals. 1000000 equals to multiply by 1000\r\n    uint public ratio;\r\n    // Decimals used \r\n    uint public decimals;\r\n\r\n    uint public kink1;\r\n    uint public A1;\r\n    uint public C1;\r\n    uint public kink2;\r\n    uint public A2;\r\n    uint public C2;\r\n    // New\r\n    uint public NEWPARAM;\r\n}"
    },
    "contracts/testProxy/ProxyTestOFStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../BoldToken.sol\";\r\nimport \"./ProxyTestOFStakingStorage.sol\";\r\n\r\n\r\n/* \r\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\r\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \r\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \r\n*/\r\n\r\ncontract ProxyTestOFStaking is\r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nProxyTestOFStakingStorage\r\n{\r\n\r\n     //Proxy Functions\r\n\r\n     /**\r\n        @dev initialize function\r\n        @param _token Token used to stake\r\n        @param _bold  Token to pay earnings\r\n        @param _rate intetest\r\n        @param _minAmount Minimun amount allowed to stake\r\n     \r\n      */\r\n     function initialize(address _token, address _bold, uint256 _rate, uint256 _minAmount) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        bold = BoldToken(_bold);\r\n        token = IERC20(_token);\r\n        rate = _rate;\r\n        minStakeAmount= _minAmount;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n    event newRate(uint  proviousRate, uint  newRate,uint timestamp);\r\n    event newMinStakeAmount(uint  proviousRate, uint  newRate,uint timestamp);\r\n    event enterAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\r\n    event retireAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\r\n\r\n    /*  This function allows the user to stake certain amount of staking token in the contract. User first \r\n    needs to give allowance to the contract to transfer the tokens and then call enter(). It will check whether\r\n    if user already has some stake in the contract, it will calculate the interest accumulated till now \r\n    and store it in \"interestAccumulated\" of struct, and update the timestamp to latest. Finally, contract will update \r\n    the user balance to reflect the recent  */\r\n    function enter(uint256 _amount) public {\r\n        uint256 previousBalance=0;\r\n        require(_amount >= minStakeAmount,\"Stake amount should be greater than minimum stake amount\");\r\n        UserInfo storage user = users[msg.sender];\r\n        if(user.balance >0){\r\n            previousBalance=user.balance;\r\n            uint256 interestAccumulated = _calculateInterest(msg.sender, user.balance);\r\n            user.interestAccumulated = user.interestAccumulated + interestAccumulated ;\r\n        }\r\n        user.balance = user.balance + _amount;\r\n        user.timestamp = block.timestamp;\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        emit enterAmount(previousBalance, user.balance, user.interestAccumulated,user.timestamp);\r\n    }\r\n\r\n    /* Allows user to withdraw part or the complete stake. In either case, he will be transferred the desired\r\n       amount of staking token and minted ALL of the interest gathered till now in form of reward token */\r\n\r\n    function leave(uint256 share) public returns(uint) {\r\n        UserInfo storage user = users[msg.sender];\r\n        require(user.balance >= share,\"Share cannot be more than current deposits\");\r\n        require(share >= minStakeAmount,\"Withdraw amount should be more than the minimum req amount\");\r\n        uint256 interestCalculated = _calculateInterest(msg.sender,user.balance);\r\n        user.interestAccumulated = 0;\r\n        uint previousBalance=user.balance;\r\n        user.balance= user.balance - share;\r\n        user.timestamp = block.timestamp;\r\n        token.transfer(msg.sender,share);\r\n        bold.mint(msg.sender,interestCalculated);\r\n        // console.log(\"-----------------------\");\r\n        // console.log(\"previousBalance: %i\",previousBalance);\r\n        // console.log(\"user.balance: %i\",user.balance);\r\n        // console.log(\"interestCalculated: %i\",interestCalculated);\r\n        emit retireAmount(previousBalance, user.balance, interestCalculated,user.timestamp);\r\n        return interestCalculated;\r\n    }\r\n\r\n    /* User can cashout all his rewards till this point as the contract will mint reward token*/\r\n    function cashoutAllRewards() public returns (uint) {\r\n        UserInfo storage user = users[msg.sender];\r\n        require(user.balance > 0,\"User has no deposits\");\r\n        uint256 interestCalculated = _calculateInterest(msg.sender,user.balance);\r\n        user.interestAccumulated = 0;\r\n        user.timestamp = block.timestamp;\r\n        bold.mint(msg.sender,interestCalculated);\r\n        emit retireAmount(user.balance, user.balance, interestCalculated,user.timestamp);\r\n\r\n        return interestCalculated;\r\n    }\r\n\r\n    /* Internal method used to calculate rewards gained for a particual user and given amount. It first \r\n       checks how many days have elapsed since the stake was deposited, then uses the simple interest formula\r\n       and returns the result */\r\n    function _calculateInterest(address _addr, uint256 share) internal view returns(uint) {\r\n        UserInfo storage user = users[_addr];\r\n        uint256 daysElapsed = (block.timestamp - user.timestamp)/SECSINDAY;\r\n        // prinicpal * (no of days / 365) * (rate/10000) , 20% return ==> rate = 2000\r\n        uint256 interestCalculated = (share*daysElapsed*rate)/(3650000); \r\n        uint256 totalInterest = user.interestAccumulated + interestCalculated;\r\n        return totalInterest;\r\n    }\r\n\r\n    /* Returns the current stake amount and the reward amount gathered till now */\r\n    function getCurrentCashout(address sender) public view returns (uint _deposit,uint _CurrentInterest) {\r\n        uint256 deposit = users[sender].balance;\r\n        uint256 currentInterest = _calculateInterest(sender,deposit);\r\n        return (deposit,currentInterest);\r\n    }\r\n\r\n    function changeOwner(address _owner) external onlyOwner{\r\n      transferOwnership(_owner);\r\n    } \r\n\r\n    function changeRate(uint256 _rate) external onlyOwner{\r\n        uint256 previous=rate;\r\n        rate = _rate;\r\n        emit newRate(previous, _rate, block.timestamp);\r\n    } \r\n\r\n    //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n\r\n    function changeMinStakeAmount(uint256 _minStakeAmount) external onlyOwner{\r\n        uint256 previous=minStakeAmount;\r\n        minStakeAmount = _minStakeAmount;\r\n        emit newMinStakeAmount(previous, minStakeAmount, block.timestamp);\r\n    } \r\n\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFPredictionsHouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interface/AggregatorV3Interface.sol\";\r\nimport \"./ProxyTestOFPredictionsHouseStorage.sol\";\r\nimport \"../IRouter.sol\";\r\n\r\n/**\r\n * @title OFPredictionsHouse\r\n */\r\ncontract ProxyTestOFPredictionsHouse is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nProxyTestOFPredictionsHouseStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n     //Proxy Functions\r\n\r\n     /**\r\n     * @notice Constructor\r\n     * @param _oracleAddress: chainlink oracle address for getting WETH price\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _bufferSeconds: buffer of time for resolution of price or time between the rounds\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _routerContract: treasury fee (1000 = 10%)\r\n     * @param _feeAmount Fee paid to place a bet\r\n     */\r\n     function initialize(\r\n         address _oracleAddress,\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _bufferSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        uint256 _feeAmount\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n       require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        oracle = _oracleAddress;\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        bufferSeconds = _bufferSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract;\r\n        feeAmount = _feeAmount;      \r\n\r\n        genesisLockOnce = false;\r\n        genesisStartOnce = false;   \r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n   /***\r\n        EVENT DEFINITIONS\r\n    */\r\n\r\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracle(address oracle);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event Refundable(uint256 indexed epoch);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betBear() is called by the user who wants to place a bet that the price of the token will go down. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the WETH amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on bull and bear), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betBear(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\"); \r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\"); \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\"); \r\n        if(ledger[epoch][msg.sender].amount >0){\r\n            require(ledger[epoch][msg.sender].position == Position_Bear, \"Can only bet on the same side\");         \r\n        }\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee); \r\n        totalFeeAmount = totalFeeAmount + feeAmount;\r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bearAmount = round.bearAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }     \r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bear;\r\n        betInfo.amount = betInfo.amount +  amount;\r\n\r\n\r\n        emit BetBear(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BEAR,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n\r\n    /* betBull() is very similar to betBear() above, only difference is that this will place bet for token price\r\n       going up */\r\n\r\n    function betBull(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\"); \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\"); \r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Bull, \"Can only bet on the same side\");         \r\n        }\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee); \r\n        totalFeeAmount = totalFeeAmount + feeAmount;      \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bullAmount = round.bullAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }          \r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bull;\r\n        betInfo.amount = betInfo.amount + amount;\r\n        \r\n\r\n        emit BetBull(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BULL,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n\r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n             require((block.timestamp > rounds[epochs[i]].closeTimestamp) || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * 2) - (ledger[epochs[i]][msg.sender].amount * 2 * treasuryFee/10000);\r\n\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).mint(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n\r\n    /* In our prediction contracts, executeRound() will do three things :\r\n       1. Lock current round. Let's say, if we are at round 5, it will lock round 5 and users wouldn't be able to \r\n          place bets for round 5 anymore. At this point, it will fetch the price for WETH from chainlink oracle and \r\n          mark it as 'lockPrice' (_safeLockRound)\r\n       2. It will execute round 4. Round 4 was already locked but now it will be executed. It will fetch the price of      \r\n          WETH and mark it as 'closePrice' for round 4. For round #4, if closePrice > Lock Price, bull wins, otherwise\r\n          bear wins. (_safeEndRound)\r\n       3. Finally, it will open round #6 and allow users to place their bets for their specifc round. (_safeStartRound)      \r\n    */\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(\r\n            genesisStartOnce && genesisLockOnce,\r\n            \"Can only run after genesisStartRound and genesisLockRound is triggered\"\r\n        );\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\r\n        _calculateRewards(currentEpoch - 1);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock genesis round\r\n     * @dev Callable by operator\r\n     */\r\n    function genesisLockRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisLockOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Start genesis round\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n\r\n   /**\r\n    * @dev This functin is called to manually mark a round as refundable\r\n    * @param epoch round is g\r\n     */\r\n    function makeRefundable(uint256 epoch) external onlyAdmin {\r\n        _makeRefundable(epoch);\r\n    }\r\n\r\n    /**\r\n    * @dev This functin is called to internally to epoch mark as refundable\r\n    * @param epoch round is g\r\n    */\r\n    function _makeRefundable(uint256 epoch) internal {\r\n       Round storage round = rounds[epoch];\r\n         require(\r\n             !round.oracleCalled,\r\n           \"Round has closed correctly\"\r\n       );\r\n       round.ifRefundable = true;\r\n       emit Refundable(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        //This contract uses BOLD to bet and MATIC to pay fees,\r\n        // all MATIC funds of this contract are fees that must be paid to treasury\r\n        uint256 currentTreasuryAmount = address(this).balance;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        genesisLockOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set buffer and interval (in seconds)\r\n     * @dev Callable by admin\r\n     */\r\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\r\n        external\r\n        whenPaused\r\n        onlyAdmin\r\n    {\r\n        require(_bufferSeconds < _intervalSeconds, \"bufferSeconds must be inferior to intervalSeconds\");\r\n        bufferSeconds = _bufferSeconds;\r\n        intervalSeconds = _intervalSeconds;\r\n\r\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Oracle address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\r\n        require(_oracle != address(0), \"Cannot be zero address\");\r\n        oracleLatestRoundId = 0;\r\n        oracle = _oracle;\r\n\r\n        emit NewOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set fee amount\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeAmount(uint256 _amount) external whenPaused onlyAdmin {\r\n        feeAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n         IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (bull/bear)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        if (round.lockPrice == round.closePrice) {\r\n            return false;\r\n        }\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.closePrice > round.lockPrice && betInfo.position == Position_Bull) ||\r\n                (round.closePrice < round.lockPrice && betInfo.position == Position_Bear));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&&\r\n            !betInfo.claimed &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 BOLD on bull and bull wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on bull)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 BOLD worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.bullAmount == 0) {\r\n            rewardBaseCalAmount = round.bearAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.bearAmount == 0) {\r\n            rewardBaseCalAmount = round.bullAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        // Bull wins\r\n        else if (round.closePrice > round.lockPrice) {\r\n            rewardBaseCalAmount = round.bullAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Bear wins\r\n        else if (round.closePrice < round.lockPrice) {\r\n            rewardBaseCalAmount = round.bearAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n        uint result=0;\r\n        if(round.closePrice < round.lockPrice){\r\n            result=EV_BEAR;\r\n        }else if (round.closePrice > round.lockPrice){\r\n            result=EV_BULL;\r\n        }\r\n        IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, result);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].lockTimestamp != 0, \"Can only end round after round has locked\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        \r\n        // If round closes after bufferSeconds, contract will not stop, but current round would be marked\r\n        // as refundable\r\n        if(block.timestamp > rounds[epoch].closeTimestamp + bufferSeconds){\r\n            _makeRefundable(epoch);\r\n        }\r\n\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closePrice = price;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId, round.closePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeLockRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only lock round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].lockTimestamp, \"Can only lock round after lockTimestamp\");\r\n        \r\n          // Do not check lock timestamp (inital round price)\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.lockPrice = price;\r\n\r\n        emit LockRound(epoch, roundId, round.lockPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 2].closeTimestamp != 0, \"Can only start round after round n-2 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\r\n            \"Can only start new round after round n-2 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.lockTimestamp = block.timestamp + intervalSeconds;\r\n        round.closeTimestamp = block.timestamp + (2 * intervalSeconds);\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].lockTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].lockTimestamp;\r\n    }\r\n\r\n  \r\n    /*This method is used to connect to chainlink price oracle and fetch the current price for the token.\r\n      It is called by the safeLockRound and safeEndRound */\r\n      \r\n    function _getPriceFromOracle() public payable returns (uint80, int256) {\r\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\r\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = AggregatorV3Interface(oracle).latestRoundData();\r\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\r\n        require(\r\n            uint256(roundId) > oracleLatestRoundId,\r\n            \"Oracle update roundId must be larger than oracleLatestRoundId\"\r\n        );\r\n        return (roundId, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n        //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interface/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    payable\r\n    returns (\r\n      uint80 roundId,\r\n      int answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFPredictionsHouseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n/**\r\n * @title OFPredictionsHouse\r\n */\r\ncontract ProxyTestOFPredictionsHouseStorage  {\r\n\r\n    uint256 constant public EV_CLAIM=1; \r\n    uint256 constant public EV_BEAR=4; \r\n    uint256 constant public EV_BULL=5;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n\r\n    uint256 constant public Position_Bull=0;\r\n    uint256 constant public Position_Bear=1;  \r\n\r\n    address public oracle;\r\n\r\n    bool public genesisLockOnce;\r\n    bool public genesisStartOnce;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public totalFeeAmount;\r\n    uint256 public feeAmount;\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract; \r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Predictions game will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, lock price, close price\r\n       round result (bear,bull), total amount wagered, amount wagered on bull and bear etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n    */        \r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 lockTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 lockPrice;\r\n        int256 closePrice;\r\n        uint256 totalAmount;\r\n        uint256 bullAmount;\r\n        uint256 bearAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n    }\r\n\r\n    uint256 public NEWFIELD;\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFPredictionP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./ProxyTestOFPredictionP2PStorage.sol\";\r\nimport \"../IRouter.sol\";\r\nimport \"../interface/AggregatorV3Interface.sol\";\r\n\r\n\r\n/**\r\n * @title OFPredictionP2P\r\n */\r\ncontract ProxyTestOFPredictionP2P is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nProxyTestOFPredictionP2PStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n\r\n    //Proxy Functions\r\n\r\n    /**\r\n     * @notice Initializer\r\n     * @param _oracleAddress: chainlink oracle address for getting WETH price\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: duration of each round\r\n     * @param _bufferSeconds: buffer of time for resolution of price or time between the rounds\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _routerContract: treasury fee (1000 = 10%)\r\n     */\r\n     function initialize(\r\n        address _oracleAddress,\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _bufferSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        oracle = _oracleAddress;\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        bufferSeconds = _bufferSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract; \r\n\r\n        genesisLockOnce = false;\r\n        genesisStartOnce = false;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n\r\n    /********\r\n                    EVENT DEFINITIONS\r\n     */\r\n\r\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event ClaimBonus(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracle(address oracle);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event Refundable(uint256 indexed epoch);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betBear() is called by the user who wants to place a bet that the price of the token will go down. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the WETH amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on bull and bear), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betBear(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\"Bet amount must be greater than minBetAmount\");\r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n            require(ledger[epoch][msg.sender].position == Position_Bear, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bearAmount = round.bearAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }     \r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bear;\r\n        betInfo.amount = betInfo.amount +  amount;\r\n        \r\n        emit BetBear(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BEAR,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betBull() is very similar to betBear() above, only difference is that this will place bet for token price\r\n       going up */\r\n\r\n    function betBull(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\"); \r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Bull, \"Can only bet on the same side\");         \r\n        }\r\n        \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bullAmount = round.bullAmount + amount;\r\n        \r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }          \r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bull;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetBull(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BULL,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n\r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require((block.timestamp > rounds[epochs[i]].closeTimestamp) || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n                treasuryAmount += _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            _safeTransferMatic(address(msg.sender), reward);\r\n        }\r\n    }\r\n    /* Our P2P contracts rewards user with bonus BOLD token for placing bets, irregardless of bets win or lose.\r\n       This method will take an array of round numbers and use the router to transfer the bonus BOLD tokens to  \r\n       the user */\r\n\r\n    function claimBonusRewards(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(bonusClaimable(epochs[i], msg.sender), \"Not eligible for bonus claim\");\r\n                addedReward = ledger[epochs[i]][msg.sender].amount;\r\n            }\r\n            ledger[epochs[i]][msg.sender].bonusClaimed = true;\r\n            reward += addedReward;\r\n\r\n            emit ClaimBonus(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM_BONUS,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).bonusPayment(tokenAddress,msg.sender, reward);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* In our prediction contracts, executeRound() will do three things :\r\n       1. Lock current round. Let's say, if we are at round 5, it will lock round 5 and users wouldn't be able to \r\n          place bets for round 5 anymore. At this point, it will fetch the price for WETH from chainlink oracle and \r\n          mark it as 'lockPrice' (_safeLockRound)\r\n       2. It will execute round 4. Round 4 was already locked but now it will be executed. It will fetch the price of      \r\n          WETH and mark it as 'closePrice' for round 4. For round #4, if closePrice > Lock Price, bull wins, otherwise\r\n          bear wins. (_safeEndRound)\r\n       3. Finally, it will open round #6 and allow users to place their bets for their specifc round. (_safeStartRound)      \r\n    */\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(\r\n            genesisStartOnce && genesisLockOnce,\r\n            \"Can only run after genesisStartRound and genesisLockRound is triggered\"\r\n        );\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\r\n        _calculateRewards(currentEpoch - 1);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock genesis round\r\n     * @dev Callable by operator\r\n     */\r\n    function genesisLockRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisLockOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Start genesis round\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n\r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */   \r\n\r\n   /**\r\n    * @dev This functin is called to manually mark a round as refundable\r\n    * @param epoch round is g\r\n     */\r\n    function makeRefundable(uint256 epoch) external onlyAdmin {\r\n        _makeRefundable(epoch);\r\n    }\r\n\r\n    /**\r\n    * @dev This functin is called to internally mark as refundable\r\n    * @param epoch round is g\r\n    */\r\n    function _makeRefundable(uint256 epoch) internal {\r\n       Round storage round = rounds[epoch];\r\n       require(\r\n             !round.oracleCalled,\r\n           \"Round has closed correctly\"\r\n       );\r\n       round.ifRefundable = true;\r\n       emit Refundable(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        uint256 currentTreasuryAmount = treasuryAmount;\r\n        treasuryAmount = 0;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        genesisLockOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set buffer and interval (in seconds)\r\n     * @dev Callable by admin\r\n     */\r\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\r\n        external\r\n        whenPaused\r\n        onlyAdmin\r\n    {\r\n        require(_bufferSeconds < _intervalSeconds, \"bufferSeconds must be inferior to intervalSeconds\");\r\n        bufferSeconds = _bufferSeconds;\r\n        intervalSeconds = _intervalSeconds;\r\n\r\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Oracle address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\r\n        require(_oracle != address(0), \"Cannot be zero address\");\r\n        oracleLatestRoundId = 0;\r\n        oracle = _oracle;\r\n        emit NewOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (bull/bear)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        if (round.lockPrice == round.closePrice) {\r\n            return false;\r\n        }\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.closePrice > round.lockPrice && betInfo.position == Position_Bull) ||\r\n                (round.closePrice < round.lockPrice && betInfo.position == Position_Bear) ||\r\n                (round.bullAmount == 0) || (round.bearAmount == 0)  \r\n                \r\n            );\r\n    }\r\n\r\n     /* This method determines id the user is eligible to claim bonus BOLD for any round */\r\n     \r\n    function bonusClaimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.bonusClaimed ;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable &&\r\n            !betInfo.claimed &&\r\n            //block.timestamp > round.closeTimestamp + bufferSeconds &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 WETH on bull and bull wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on bull)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 WETH worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.bullAmount == 0) {\r\n            rewardBaseCalAmount = round.bearAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.bearAmount == 0) {\r\n            rewardBaseCalAmount = round.bullAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        // Bull wins\r\n        else if (round.closePrice > round.lockPrice) {\r\n            rewardBaseCalAmount = round.bullAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Bear wins\r\n        else if (round.closePrice < round.lockPrice) {\r\n            rewardBaseCalAmount = round.bearAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n        uint256 result=0;\r\n        if(round.closePrice < round.lockPrice){\r\n            result=EV_BEAR;\r\n        }else if (round.closePrice > round.lockPrice){\r\n            result=EV_BULL;\r\n        }\r\n        IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, result);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].lockTimestamp != 0, \"Can only end round after round has locked\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        \r\n        // If round closes after bufferSeconds, contract will not stop, but current round would be marked\r\n        // as refundable\r\n        if(block.timestamp > rounds[epoch].closeTimestamp + bufferSeconds){\r\n            _makeRefundable(epoch);\r\n        }\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closePrice = price;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId, round.closePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeLockRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only lock round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].lockTimestamp, \"Can only lock round after lockTimestamp\");\r\n       \r\n         // Do not check lock timestamp (inital round price)\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.lockPrice = price;\r\n\r\n        emit LockRound(epoch, roundId, round.lockPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 2].closeTimestamp != 0, \"Can only start round after round n-2 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\r\n            \"Can only start new round after round n-2 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.lockTimestamp = block.timestamp + intervalSeconds;\r\n        round.closeTimestamp = block.timestamp + (2 * intervalSeconds);\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].lockTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].lockTimestamp;\r\n    }\r\n\r\n    /*This method is used to connect to chainlink price oracle and fetch the current price for the token.\r\n      It is called by the safeLockRound and safeEndRound */\r\n\r\n    function _getPriceFromOracle() public payable returns (uint80, int256) {\r\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\r\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = AggregatorV3Interface(oracle).latestRoundData();\r\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\r\n       // console.log(\"roundId: %i\",roundId);\r\n        // console.log(\"oracleLatestRoundId: %i\",oracleLatestRoundId);\r\n        require(\r\n            uint256(roundId) > oracleLatestRoundId,\r\n            \"Oracle update roundId must be larger than oracleLatestRoundId\"\r\n        );\r\n        return (roundId, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n    //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n\r\n\r\n\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFPredictionP2PStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n\r\n\r\n/**\r\n * @title OFPredictionP2P\r\n */\r\ncontract ProxyTestOFPredictionP2PStorage {\r\n\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_BEAR=4;  \r\n    uint256 constant public EV_BULL=5;  \r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n    uint256 constant public Position_Bull=0;\r\n    uint256 constant public Position_Bear=1;  \r\n\r\n    address public oracle;\r\n\r\n    bool public genesisLockOnce;\r\n    bool public genesisStartOnce;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract; \r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Predictions game will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, lock price, close price\r\n       round result (bear,bull), total amount wagered, amount wagered on bull and bear etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */     \r\n\r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 lockTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 lockPrice;\r\n        int256 closePrice;\r\n        uint256 totalAmount;\r\n        uint256 bullAmount;\r\n        uint256 bearAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n        bool bonusClaimed;\r\n    }\r\n\r\n\r\n    uint256 public NEWFIELD;\r\n\r\n \r\n}\r\n"
    },
    "contracts/OFPredictionsHouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interface/AggregatorV3Interface.sol\";\r\nimport \"./OFPredictionsHouseStorage.sol\";\r\nimport \"./IRouter.sol\";\r\n\r\n/**\r\n * @title OFPredictionsHouse\r\n */\r\ncontract OFPredictionsHouse is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nOFPredictionsHouseStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n     //Proxy Functions\r\n\r\n     /**\r\n     * @notice Constructor\r\n     * @param _oracleAddress: chainlink oracle address for getting WETH price\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _bufferSeconds: buffer of time for resolution of price or time between the rounds\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _routerContract: treasury fee (1000 = 10%)\r\n     * @param _feeAmount Fee paid to place a bet\r\n     */\r\n     function initialize(\r\n         address _oracleAddress,\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _bufferSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        uint256 _feeAmount\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n       require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        oracle = _oracleAddress;\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        bufferSeconds = _bufferSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract;\r\n        feeAmount = _feeAmount;      \r\n\r\n        genesisLockOnce = false;\r\n        genesisStartOnce = false;   \r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n   /***\r\n        EVENT DEFINITIONS\r\n    */\r\n\r\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracle(address oracle);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event Refundable(uint256 indexed epoch);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betBear() is called by the user who wants to place a bet that the price of the token will go down. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the WETH amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on bull and bear), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betBear(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\"); \r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\"); \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\"); \r\n        if(ledger[epoch][msg.sender].amount >0){\r\n            require(ledger[epoch][msg.sender].position == Position_Bear, \"Can only bet on the same side\");         \r\n        }\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee); \r\n        totalFeeAmount = totalFeeAmount + feeAmount;\r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bearAmount = round.bearAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }     \r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bear;\r\n        betInfo.amount = betInfo.amount +  amount;\r\n\r\n\r\n        emit BetBear(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BEAR,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n\r\n    /* betBull() is very similar to betBear() above, only difference is that this will place bet for token price\r\n       going up */\r\n\r\n    function betBull(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\"); \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\"); \r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Bull, \"Can only bet on the same side\");         \r\n        }\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee); \r\n        totalFeeAmount = totalFeeAmount + feeAmount;      \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bullAmount = round.bullAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }          \r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bull;\r\n        betInfo.amount = betInfo.amount + amount;\r\n        \r\n\r\n        emit BetBull(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BULL,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n\r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n             require((block.timestamp > rounds[epochs[i]].closeTimestamp) || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * 2) - (ledger[epochs[i]][msg.sender].amount * 2 * treasuryFee/10000);\r\n\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).mint(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n\r\n    /* In our prediction contracts, executeRound() will do three things :\r\n       1. Lock current round. Let's say, if we are at round 5, it will lock round 5 and users wouldn't be able to \r\n          place bets for round 5 anymore. At this point, it will fetch the price for WETH from chainlink oracle and \r\n          mark it as 'lockPrice' (_safeLockRound)\r\n       2. It will execute round 4. Round 4 was already locked but now it will be executed. It will fetch the price of      \r\n          WETH and mark it as 'closePrice' for round 4. For round #4, if closePrice > Lock Price, bull wins, otherwise\r\n          bear wins. (_safeEndRound)\r\n       3. Finally, it will open round #6 and allow users to place their bets for their specifc round. (_safeStartRound)      \r\n    */\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(\r\n            genesisStartOnce && genesisLockOnce,\r\n            \"Can only run after genesisStartRound and genesisLockRound is triggered\"\r\n        );\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\r\n        _calculateRewards(currentEpoch - 1);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock genesis round\r\n     * @dev Callable by operator\r\n     */\r\n    function genesisLockRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisLockOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Start genesis round\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n\r\n   /**\r\n    * @dev This functin is called to manually mark a round as refundable\r\n    * @param epoch round is g\r\n     */\r\n    function makeRefundable(uint256 epoch) external onlyAdmin {\r\n        _makeRefundable(epoch);\r\n    }\r\n\r\n    /**\r\n    * @dev This functin is called to internally to epoch mark as refundable\r\n    * @param epoch round is g\r\n    */\r\n    function _makeRefundable(uint256 epoch) internal {\r\n       Round storage round = rounds[epoch];\r\n         require(\r\n             !round.oracleCalled,\r\n           \"Round has closed correctly\"\r\n       );\r\n       round.ifRefundable = true;\r\n       emit Refundable(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        //This contract uses BOLD to bet and MATIC to pay fees,\r\n        // all MATIC funds of this contract are fees that must be paid to treasury\r\n        uint256 currentTreasuryAmount = address(this).balance;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        genesisLockOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set buffer and interval (in seconds)\r\n     * @dev Callable by admin\r\n     */\r\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\r\n        external\r\n        whenPaused\r\n        onlyAdmin\r\n    {\r\n        require(_bufferSeconds < _intervalSeconds, \"bufferSeconds must be inferior to intervalSeconds\");\r\n        bufferSeconds = _bufferSeconds;\r\n        intervalSeconds = _intervalSeconds;\r\n\r\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Oracle address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\r\n        require(_oracle != address(0), \"Cannot be zero address\");\r\n        oracleLatestRoundId = 0;\r\n        oracle = _oracle;\r\n\r\n        emit NewOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set fee amount\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeAmount(uint256 _amount) external whenPaused onlyAdmin {\r\n        feeAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n         IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (bull/bear)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        if (round.lockPrice == round.closePrice) {\r\n            return false;\r\n        }\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.closePrice > round.lockPrice && betInfo.position == Position_Bull) ||\r\n                (round.closePrice < round.lockPrice && betInfo.position == Position_Bear));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&&\r\n            !betInfo.claimed &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 BOLD on bull and bull wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on bull)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 BOLD worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.bullAmount == 0) {\r\n            rewardBaseCalAmount = round.bearAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.bearAmount == 0) {\r\n            rewardBaseCalAmount = round.bullAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        // Bull wins\r\n        else if (round.closePrice > round.lockPrice) {\r\n            rewardBaseCalAmount = round.bullAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Bear wins\r\n        else if (round.closePrice < round.lockPrice) {\r\n            rewardBaseCalAmount = round.bearAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n        uint result=0;\r\n        if(round.closePrice < round.lockPrice){\r\n            result=EV_BEAR;\r\n        }else if (round.closePrice > round.lockPrice){\r\n            result=EV_BULL;\r\n        }\r\n        IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, result);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].lockTimestamp != 0, \"Can only end round after round has locked\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        \r\n        // If round closes after bufferSeconds, contract will not stop, but current round would be marked\r\n        // as refundable\r\n        if(block.timestamp > rounds[epoch].closeTimestamp + bufferSeconds){\r\n            _makeRefundable(epoch);\r\n        }\r\n\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closePrice = price;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId, round.closePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeLockRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only lock round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].lockTimestamp, \"Can only lock round after lockTimestamp\");\r\n        \r\n          // Do not check lock timestamp (inital round price)\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.lockPrice = price;\r\n\r\n        emit LockRound(epoch, roundId, round.lockPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 2].closeTimestamp != 0, \"Can only start round after round n-2 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\r\n            \"Can only start new round after round n-2 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.lockTimestamp = block.timestamp + intervalSeconds;\r\n        round.closeTimestamp = block.timestamp + (2 * intervalSeconds);\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].lockTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].lockTimestamp;\r\n    }\r\n\r\n  \r\n    /*This method is used to connect to chainlink price oracle and fetch the current price for the token.\r\n      It is called by the safeLockRound and safeEndRound */\r\n      \r\n    function _getPriceFromOracle() public payable returns (uint80, int256) {\r\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\r\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = AggregatorV3Interface(oracle).latestRoundData();\r\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\r\n        require(\r\n            uint256(roundId) > oracleLatestRoundId,\r\n            \"Oracle update roundId must be larger than oracleLatestRoundId\"\r\n        );\r\n        return (roundId, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "contracts/OFPredictionsHouseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n/**\r\n * @title OFPredictionsHouse\r\n */\r\ncontract OFPredictionsHouseStorage  {\r\n\r\n    uint256 constant public EV_CLAIM=1; \r\n    uint256 constant public EV_BEAR=4; \r\n    uint256 constant public EV_BULL=5;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n\r\n    uint256 constant public Position_Bull=0;\r\n    uint256 constant public Position_Bear=1;  \r\n\r\n    address public oracle;\r\n\r\n    bool public genesisLockOnce;\r\n    bool public genesisStartOnce;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public totalFeeAmount;\r\n    uint256 public feeAmount;\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract; \r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Predictions game will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, lock price, close price\r\n       round result (bear,bull), total amount wagered, amount wagered on bull and bear etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n    */        \r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 lockTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 lockPrice;\r\n        int256 closePrice;\r\n        uint256 totalAmount;\r\n        uint256 bullAmount;\r\n        uint256 bearAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFCointossP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../utils/VRFConsumerBaseUpgradable.sol\";\r\nimport \"../IRouter.sol\";\r\nimport \"./ProxyTestOFCointossP2PStorage.sol\";\r\n\r\n\r\ncontract ProxyTestOFCointossP2P  is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nVRFConsumerBaseUpgradable,\r\nProxyTestOFCointossP2PStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n\r\n     //Proxy Functions\r\n\r\n    // #VBVB Set parameters for VRF\r\n    //  VRF Coordinator 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, \r\n    //  LINK Token 0x326C977E6efc84E512bB9C30f76E30c160eD06FB, \r\n    //  keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\r\n    //  fee = 0.0001 * 10**18; // 0.0001 LINK\r\n    /**\r\n     * @notice Initializer\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _tokenAddress for bonus rewards (BOLD)\r\n     * @param _routerContract ROuter contract\r\n     * @param _coordinatorContract VRF coordinator address\r\n     * @param _linkContract LINK token contravt address\r\n     * @param _keyHash key hash fro VRF Cordinator\r\n     * @param linkFee Fees to pay to VRF Coordinator\r\n     */\r\n     function initialize(\r\n          address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        address _coordinatorContract,\r\n        address _linkContract,\r\n        bytes32 _keyHash,\r\n        uint linkFee\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         __VRFConsumerBaseUpgradable__init( _coordinatorContract, _linkContract);\r\n         _changeAdmin(msg.sender);\r\n\r\n         require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        //#VBVB VRFAggregator parameters\r\n        keyHash = _keyHash;\r\n        fee = linkFee;\r\n        routerContract = _routerContract; \r\n\r\n        genesisStartOnce=false;\r\n        \r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n   /*********\r\n        EVENT DEFINITIONS\r\n    */\r\n    event BetTails(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetHeads(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event ClaimBonus(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    \r\n    event NewIntervalPeriod(uint256 secs);\r\n    event NewAdminAddress(address admin);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event requestRandom(bytes32 requestId);\r\n    event receivedRandom(bytes32 requestId,uint256 randomness,address sender);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betTails() is called by the user who wants to place a bet for 'tails' outcome of the coin toss. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on heads and tails), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betTails(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\" Bet amount must be greater than minBetAmount\");\r\n        uint256 amount = msg.value;\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Tails, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.tailsAmount = round.tailsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }        \r\n        betInfo.position = Position_Tails;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetTails(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_TAILS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betHeads() is very similar to betTails() above */\r\n\r\n    function betHeads(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\"Bet amount must be greater than minBetAmount\");\r\n\r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Heads, \"Can only bet on the same side\");         \r\n        }  \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.headsAmount = round.headsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        } \r\n        betInfo.position = Position_Heads;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetHeads(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_HEADS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n       \r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n                treasuryAmount += _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            _safeTransferMatic(address(msg.sender), reward);\r\n        }\r\n    }\r\n\r\n    /* Our P2P contracts rewards user with bonus BOLD token for placing bets, irregardless of bets win or lose.\r\n       This method will take an array of round numbers and use the router to transfer the bonus BOLD tokens to  \r\n       the user */\r\n    function claimBonusRewards(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(bonusClaimable(epochs[i], msg.sender), \"Not eligible for bonus claim\");\r\n                addedReward = ledger[epochs[i]][msg.sender].amount;\r\n            }\r\n            ledger[epochs[i]][msg.sender].bonusClaimed = true;\r\n            reward += addedReward;\r\n            emit ClaimBonus(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM_BONUS,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).bonusPayment(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    /* This method is called by the operator to get a random number, whose first bit ( 0 or 1) will determine\r\n       whether the toss outcome is heads or tails.  */\r\n\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        //#VBVB Execute round will request a random number\r\n        require(\r\n            genesisStartOnce,\r\n            \"Can only run after genesisStartRound is triggered\"\r\n        );\r\n\r\n         require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        // If these requirements are not fullfilled, there is no need to request random and waste LINKK funds\r\n        require(rounds[currentEpoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[currentEpoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        bytes32 requestId=requestRandomness(keyHash, fee);\r\n        emit requestRandom(requestId);\r\n    }\r\n\r\n    \r\n    /** Start the next round n, lock price for round n-1, end round n-2\r\n     * @notice This function is called by coordinator with the random number. \r\n     * @dev Callable by operator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        virtual\r\n        override \r\n        whenNotPaused\r\n    {\r\n        randomResult = randomness;\r\n        count++;\r\n        emit receivedRandom(requestId,randomness,msg.sender);\r\n        oracleLatestRoundId=count;\r\n        uint80 currentRoundId=uint80(count);\r\n\r\n        // #VBVB\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        //_safeEndRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n         // #VBVB we need only first bit\r\n         int256 result=int256(randomness & uint256(0x01));\r\n         uint emitResult=EV_TAILS;\r\n         if(result>0){\r\n             emitResult=EV_HEADS;\r\n         }\r\n         IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, emitResult);\r\n        _safeEndRound(currentEpoch, currentRoundId, result);\r\n        _calculateRewards(currentEpoch);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n\r\n\r\n\r\n    /* This method needs to be called when the first round needs to be started. This initiates the first round,\r\n        and subsequent rounds ( round2, round3 etc.) are started by the executeRound() method. */\r\n\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n    \r\n        \r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */\r\n\r\n    function makeRefundable(uint256 epoch) external whenPaused onlyAdmin {\r\n       Round storage round = rounds[epoch];\r\n       round.ifRefundable = true;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        uint256 currentTreasuryAmount = treasuryAmount;\r\n        treasuryAmount = 0;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set LINK token fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setLinkFee(uint256 _linkFee) external whenPaused onlyAdmin {\r\n        fee = _linkFee;\r\n    }\r\n    function getLinkFee() public view returns(uint256) {\r\n        return fee;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set interval seconds\r\n     * @dev Callable by admin\r\n     */\r\n    function setIntervalSeconds(uint256 _intervalSeconds) external whenPaused onlyAdmin {\r\n        require(_intervalSeconds > 0, \"Must be greater than 0\");\r\n        intervalSeconds = _intervalSeconds;\r\n        emit NewIntervalPeriod(_intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        // ## VBVB Uncontrolled error condition\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (head/tails)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.tossResult == 1 && betInfo.position == Position_Heads) ||\r\n             (round.tossResult == 0 && betInfo.position == Position_Tails) ||\r\n             (round.headsAmount == 0) || (round.tailsAmount == 0)  \r\n            );\r\n    }\r\n\r\n    /* This method determines id the user is eligible to claim bonus BOLD for any round */\r\n\r\n    function bonusClaimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.bonusClaimed;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&& \r\n            !betInfo.claimed &&\r\n            block.timestamp > round.closeTimestamp &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 WETH on tails and tails wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on tails)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 WETH worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        // Heads wins\r\n        if (round.headsAmount == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tailsAmount == 0) {\r\n            rewardBaseCalAmount = round.headsAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tossResult == 1) {\r\n            rewardBaseCalAmount = round.headsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Tails wins\r\n        else if (round.tossResult == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        Round storage round = rounds[epoch];\r\n        round.tossResult = price;\r\n        round.closeOracleId = roundId;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 1].closeTimestamp != 0, \"Can only start round after round n-1 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 1].closeTimestamp,\r\n            \"Can only start new round after round n-1 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].closeTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].closeTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    /**\r\n     * @notice Transfer matic in a safe way\r\n     * @param to: address to transfer matic to\r\n     * @param value: matic amount to transfer (in wei)\r\n     */\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n    //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/utils/VRFConsumerBaseUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interface/LinkTokenInterface.sol\";\r\n\r\nimport \"./VRFRequestIDBase.sol\";\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBaseUpgradable is VRFRequestIDBase {\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n  /**\r\n   * @dev In order to keep backwards compatibility we have kept the user\r\n   * seed field around. We remove the use of it because given that the blockhash\r\n   * enters later, it overrides whatever randomness the used seed provides.\r\n   * Given that it adds no security, and can easily lead to misunderstandings,\r\n   * we have removed it from usage and can now provide a simpler API.\r\n   */\r\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash] + 1;\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface internal LINK;\r\n  address private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n    private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  function __VRFConsumerBaseUpgradable__init(address _vrfCoordinator, address _link) public {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestOFCointossP2PStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract ProxyTestOFCointossP2PStorage\r\n\r\n{\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_TAILS=2;\r\n    uint256 constant public EV_HEADS=3;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11;\r\n    uint256 constant Position_Tails=0;\r\n    uint256 constant Position_Heads=1;\r\n    bool public genesisStartOnce;// NOt safe for upgrade = false;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    //#VBVB This block is for VRF Agregator\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    uint256 public randomResult;\r\n    uint256 public count;\r\n\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract;\r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Coin Toss will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, round result\r\n       (heads,tails), total amount wagered, amount wagered on heads and tails etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */\r\n\r\n    enum Position {\r\n        Tails,\r\n        Heads\r\n    }\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 tossResult;\r\n        uint256 closeOracleId;\r\n        uint256 totalAmount;\r\n        uint256 headsAmount;\r\n        uint256 tailsAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n        bool bonusClaimed;\r\n    }\r\n\r\n      //NEW FIELD\r\n  uint256 public NEWFIELD;\r\n\r\n}\r\n\r\n"
    },
    "contracts/interface/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n"
    },
    "contracts/utils/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract VRFRequestIDBase {\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  ) internal pure returns (uint256) {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n"
    },
    "contracts/OFCointossP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./utils/VRFConsumerBaseUpgradable.sol\";\r\nimport \"./IRouter.sol\";\r\nimport \"./OFCointossP2PStorage.sol\";\r\n\r\n\r\ncontract OFCointossP2P  is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nVRFConsumerBaseUpgradable,\r\nOFCointossP2PStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n\r\n     //Proxy Functions\r\n\r\n    // #VBVB Set parameters for VRF\r\n    //  VRF Coordinator 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, \r\n    //  LINK Token 0x326C977E6efc84E512bB9C30f76E30c160eD06FB, \r\n    //  keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\r\n    //  fee = 0.0001 * 10**18; // 0.0001 LINK\r\n    /**\r\n     * @notice Initializer\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _tokenAddress for bonus rewards (BOLD)\r\n     * @param _routerContract ROuter contract\r\n     * @param _coordinatorContract VRF coordinator address\r\n     * @param _linkContract LINK token contravt address\r\n     * @param _keyHash key hash fro VRF Cordinator\r\n     * @param linkFee Fees to pay to VRF Coordinator\r\n     */\r\n     function initialize(\r\n          address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        address _coordinatorContract,\r\n        address _linkContract,\r\n        bytes32 _keyHash,\r\n        uint linkFee\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         __VRFConsumerBaseUpgradable__init( _coordinatorContract, _linkContract);\r\n         _changeAdmin(msg.sender);\r\n\r\n         require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        //#VBVB VRFAggregator parameters\r\n        keyHash = _keyHash;\r\n        fee = linkFee;\r\n        routerContract = _routerContract; \r\n\r\n        genesisStartOnce=false;\r\n        \r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n   /*********\r\n        EVENT DEFINITIONS\r\n    */\r\n    event BetTails(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetHeads(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event ClaimBonus(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    \r\n    event NewIntervalPeriod(uint256 secs);\r\n    event NewAdminAddress(address admin);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event requestRandom(bytes32 requestId);\r\n    event receivedRandom(bytes32 requestId,uint256 randomness,address sender);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betTails() is called by the user who wants to place a bet for 'tails' outcome of the coin toss. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on heads and tails), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betTails(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\" Bet amount must be greater than minBetAmount\");\r\n        uint256 amount = msg.value;\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Tails, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.tailsAmount = round.tailsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }        \r\n        betInfo.position = Position_Tails;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetTails(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_TAILS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betHeads() is very similar to betTails() above */\r\n\r\n    function betHeads(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\"Bet amount must be greater than minBetAmount\");\r\n\r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Heads, \"Can only bet on the same side\");         \r\n        }  \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.headsAmount = round.headsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        } \r\n        betInfo.position = Position_Heads;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetHeads(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_HEADS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n       \r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n                treasuryAmount += _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            _safeTransferMatic(address(msg.sender), reward);\r\n        }\r\n    }\r\n\r\n    /* Our P2P contracts rewards user with bonus BOLD token for placing bets, irregardless of bets win or lose.\r\n       This method will take an array of round numbers and use the router to transfer the bonus BOLD tokens to  \r\n       the user */\r\n    function claimBonusRewards(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(bonusClaimable(epochs[i], msg.sender), \"Not eligible for bonus claim\");\r\n                addedReward = ledger[epochs[i]][msg.sender].amount;\r\n            }\r\n            ledger[epochs[i]][msg.sender].bonusClaimed = true;\r\n            reward += addedReward;\r\n            emit ClaimBonus(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM_BONUS,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).bonusPayment(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    /* This method is called by the operator to get a random number, whose first bit ( 0 or 1) will determine\r\n       whether the toss outcome is heads or tails.  */\r\n\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        //#VBVB Execute round will request a random number\r\n        require(\r\n            genesisStartOnce,\r\n            \"Can only run after genesisStartRound is triggered\"\r\n        );\r\n\r\n         require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        // If these requirements are not fullfilled, there is no need to request random and waste LINKK funds\r\n        require(rounds[currentEpoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[currentEpoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        bytes32 requestId=requestRandomness(keyHash, fee);\r\n        emit requestRandom(requestId);\r\n    }\r\n\r\n    \r\n    /** Start the next round n, lock price for round n-1, end round n-2\r\n     * @notice This function is called by coordinator with the random number. \r\n     * @dev Callable by operator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        virtual\r\n        override \r\n        whenNotPaused\r\n    {\r\n        randomResult = randomness;\r\n        count++;\r\n        emit receivedRandom(requestId,randomness,msg.sender);\r\n        oracleLatestRoundId=count;\r\n        uint80 currentRoundId=uint80(count);\r\n\r\n        // #VBVB\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        //_safeEndRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n         // #VBVB we need only first bit\r\n         int256 result=int256(randomness & uint256(0x01));\r\n         uint emitResult=EV_TAILS;\r\n         if(result>0){\r\n             emitResult=EV_HEADS;\r\n         }\r\n         IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, emitResult);\r\n        _safeEndRound(currentEpoch, currentRoundId, result);\r\n        _calculateRewards(currentEpoch);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n\r\n\r\n\r\n    /* This method needs to be called when the first round needs to be started. This initiates the first round,\r\n        and subsequent rounds ( round2, round3 etc.) are started by the executeRound() method. */\r\n\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n    \r\n        \r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */\r\n\r\n    function makeRefundable(uint256 epoch) external whenPaused onlyAdmin {\r\n       Round storage round = rounds[epoch];\r\n       round.ifRefundable = true;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        uint256 currentTreasuryAmount = treasuryAmount;\r\n        treasuryAmount = 0;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set LINK token fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setLinkFee(uint256 _linkFee) external whenPaused onlyAdmin {\r\n        fee = _linkFee;\r\n    }\r\n    function getLinkFee() public view returns(uint256) {\r\n        return fee;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set interval seconds\r\n     * @dev Callable by admin\r\n     */\r\n    function setIntervalSeconds(uint256 _intervalSeconds) external whenPaused onlyAdmin {\r\n        require(_intervalSeconds > 0, \"Must be greater than 0\");\r\n        intervalSeconds = _intervalSeconds;\r\n        emit NewIntervalPeriod(_intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        // ## VBVB Uncontrolled error condition\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (head/tails)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.tossResult == 1 && betInfo.position == Position_Heads) ||\r\n             (round.tossResult == 0 && betInfo.position == Position_Tails) ||\r\n             (round.headsAmount == 0) || (round.tailsAmount == 0)  \r\n            );\r\n    }\r\n\r\n    /* This method determines id the user is eligible to claim bonus BOLD for any round */\r\n\r\n    function bonusClaimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.bonusClaimed;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&& \r\n            !betInfo.claimed &&\r\n            block.timestamp > round.closeTimestamp &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 WETH on tails and tails wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on tails)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 WETH worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        // Heads wins\r\n        if (round.headsAmount == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tailsAmount == 0) {\r\n            rewardBaseCalAmount = round.headsAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tossResult == 1) {\r\n            rewardBaseCalAmount = round.headsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Tails wins\r\n        else if (round.tossResult == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        Round storage round = rounds[epoch];\r\n        round.tossResult = price;\r\n        round.closeOracleId = roundId;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 1].closeTimestamp != 0, \"Can only start round after round n-1 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 1].closeTimestamp,\r\n            \"Can only start new round after round n-1 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].closeTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].closeTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    /**\r\n     * @notice Transfer matic in a safe way\r\n     * @param to: address to transfer matic to\r\n     * @param value: matic amount to transfer (in wei)\r\n     */\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/OFCointossP2PStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract OFCointossP2PStorage\r\n\r\n{\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_TAILS=2;\r\n    uint256 constant public EV_HEADS=3;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n    uint256 constant Position_Tails=0;\r\n    uint256 constant Position_Heads=1;\r\n    bool public genesisStartOnce;// NOt safe for upgrade = false;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    //#VBVB This block is for VRF Agregator\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    uint256 public randomResult;\r\n    uint256 public count;\r\n\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract;\r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Coin Toss will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, round result\r\n       (heads,tails), total amount wagered, amount wagered on heads and tails etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */\r\n\r\n    // enum Position {\r\n    //     Tails,\r\n    //     Heads\r\n    // }\r\n\r\n\r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 tossResult;\r\n        uint256 closeOracleId;\r\n        uint256 totalAmount;\r\n        uint256 headsAmount;\r\n        uint256 tailsAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n        bool bonusClaimed;\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/testProxy/ProxyTestOFCointossHouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../IRouter.sol\";\r\nimport \"./ProxyTestOFCointossHouseStorage.sol\";\r\n\r\n\r\ncontract ProxyTestOFCointossHouse  is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nProxyTestOFCointossHouseStorage\r\n{\r\n  \r\n\r\n   //Proxy Functions\r\n\r\n    /**\r\n     * @notice Initialize function from proxy contract\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     */\r\n     function initialize(\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        address _feeToken,\r\n        uint256 _feeAmount\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract;\r\n        feeToken =  _feeToken;\r\n        feeAmount = _feeAmount;\r\n\r\n        genesisStartOnce = false;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n    /* LIST OF EVENTS  */\r\n\r\n    event BetTails(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetHeads(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewIntervalPeriod(uint256 secs);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event requestRandom(bytes32 requestId);\r\n    event receivedRandom(uint256 randomness,address sender);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n\r\n    /* betTails() is called by the user who wants to place a bet for 'tails' outcome of the coin toss. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on heads and tails), BetInfo \r\n       struct (user's position and amount for that specific round) \r\n    */\r\n\r\n    function betTails(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\");\r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\");\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Tails, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount, treasuryFee);\r\n        totalFeeAmount = totalFeeAmount + feeAmount; \r\n\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.tailsAmount = round.tailsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }        \r\n        betInfo.position = Position_Tails;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetTails(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_TAILS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betHeads() is very similar to betTails() above */\r\n    \r\n    function betHeads(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\");   \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\");\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Heads, \"Can only bet on the same side\");         \r\n        }  \r\n\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee);\r\n        totalFeeAmount = totalFeeAmount + feeAmount;        \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.headsAmount = round.headsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        } \r\n        betInfo.position = Position_Heads;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetHeads(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_HEADS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n     \r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp || rounds[epochs[i]].ifRefundable , \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * 2) - (ledger[epochs[i]][msg.sender].amount * 2 * treasuryFee/10000);\r\n\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).mint(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    \r\n    /* This method is called by the operator to get a random number, whose first bit ( 0 or 1) will determine\r\n       whether the toss outcome is heads or tails. This method is not directly called, it is called by the \r\n       exexcuteRound() method  */\r\n     \r\n    function fulfillRandomness(uint256 randomness)\r\n        public\r\n        virtual\r\n         whenNotPaused \r\n         onlyAdminOrOperator\r\n    {\r\n        randomResult = randomness;\r\n        count++;\r\n        emit receivedRandom(randomness,msg.sender);\r\n        \r\n        \r\n\r\n        oracleLatestRoundId=count;\r\n        uint80 currentRoundId=uint80(count);\r\n\r\n\r\n         // #VBVB we need only first bit\r\n         int256 result=int256(randomness & uint256(0x01));\r\n             uint emitResult=EV_TAILS;\r\n         if(result>0){\r\n             emitResult=EV_HEADS;\r\n         }\r\n         IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, emitResult);\r\n        _safeEndRound(currentEpoch, currentRoundId, result);\r\n        _calculateRewards(currentEpoch);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /* This method needs to be called when the first round needs to be started. This initiates the first round,\r\n        and subsequent rounds ( round2, round3 etc.) are started by the executeRound() method. */\r\n    \r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n    \r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */\r\n\r\n    function makeRefundable(uint256 epoch) external whenPaused onlyAdmin {\r\n       Round storage round = rounds[epoch];\r\n       round.ifRefundable = true;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        //This contract uses BOLD to bet and MATIC to pay fees,\r\n        // all MATIC funds of this contract are fees that must be paid to treasury\r\n        uint256 currentTreasuryAmount = address(this).balance;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n        /**\r\n     * @notice Set fee token address\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeToken(address _token) external whenPaused onlyAdmin {\r\n        require(_token != address(0), \"Cannot be zero address\");\r\n        feeToken = _token;\r\n    }\r\n\r\n    /**\r\n     * @notice Set fee amount\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeAmount(uint256 _amount) external whenPaused onlyAdmin {\r\n        feeAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        // Profit would send from router\r\n        //IRouter(routerContract).profit(_token, msg.sender, _amount);\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set interval seconds\r\n     * @dev Callable by admin\r\n     */\r\n    function setIntervalSeconds(uint256 _intervalSeconds) external whenPaused onlyAdmin {\r\n        require(_intervalSeconds > 0, \"Must be greater than 0\");\r\n        intervalSeconds = _intervalSeconds;\r\n        emit NewIntervalPeriod(_intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n           // ## VBVB Uncontrolled error condition\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (head/tails)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.tossResult == 1 && betInfo.position == Position_Heads) ||\r\n             (round.tossResult == 0 && betInfo.position == Position_Tails) \r\n            );\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&& \r\n            !betInfo.claimed &&\r\n            block.timestamp > round.closeTimestamp &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 BOLD on tails and tails wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on tails)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 BOLD worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.headsAmount == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tailsAmount == 0) {\r\n            rewardBaseCalAmount = round.headsAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tossResult == 1) {\r\n            rewardBaseCalAmount = round.headsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Tails wins\r\n        else if (round.tossResult == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        //treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        Round storage round = rounds[epoch];\r\n        round.tossResult = price;\r\n        round.closeOracleId = roundId;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 1].closeTimestamp != 0, \"Can only start round after round n-1 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 1].closeTimestamp,\r\n            \"Can only start new round after round n-1 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].closeTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].closeTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n\r\n    //NEW FIELD\r\n    function setNEWFIELD(uint256 _NEWFIELD) public {\r\n        NEWFIELD=_NEWFIELD;\r\n    }\r\n\r\n\r\n}\r\n\r\n"
    },
    "contracts/testProxy/ProxyTestOFCointossHouseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract ProxyTestOFCointossHouseStorage {\r\n\r\n\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_TAILS=2;\r\n    uint256 constant public EV_HEADS=3;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n    uint256 constant public Position_Tails=0;\r\n    uint256 constant public Position_Heads=1;\r\n    bool public genesisStartOnce; // Not safe for proxy = false;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator\r\n\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    //#VBVB This block is for VRF Agregator\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    uint256 public randomResult;\r\n    uint256 public count;\r\n    address public tokenAddress;\r\n    address public routerContract;\r\n    uint256 public totalFeeAmount;\r\n    uint256 public feeAmount;\r\n    address public feeToken;\r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Coin Toss will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, round result\r\n       (heads,tails), total amount wagered, amount wagered on heads and tails etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */\r\n\r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 tossResult;\r\n        uint256 closeOracleId;\r\n        uint256 totalAmount;\r\n        uint256 headsAmount;\r\n        uint256 tailsAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    //New field\r\n    uint256 public NEWFIELD;\r\n}\r\n\r\n"
    },
    "contracts/OFPredictionP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./OFPredictionP2PStorage.sol\";\r\nimport \"./IRouter.sol\";\r\nimport \"./interface/AggregatorV3Interface.sol\";\r\n\r\n\r\n/**\r\n * @title OFPredictionP2P\r\n */\r\ncontract OFPredictionP2P is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nOFPredictionP2PStorage\r\n{\r\n    using SafeERC20Upgradeable for IERC20;\r\n\r\n\r\n    //Proxy Functions\r\n\r\n    /**\r\n     * @notice Initializer\r\n     * @param _oracleAddress: chainlink oracle address for getting WETH price\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: duration of each round\r\n     * @param _bufferSeconds: buffer of time for resolution of price or time between the rounds\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     * @param _routerContract: treasury fee (1000 = 10%)\r\n     */\r\n     function initialize(\r\n        address _oracleAddress,\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _bufferSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        oracle = _oracleAddress;\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        bufferSeconds = _bufferSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract; \r\n\r\n        genesisLockOnce = false;\r\n        genesisStartOnce = false;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n\r\n    /********\r\n                    EVENT DEFINITIONS\r\n     */\r\n\r\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event ClaimBonus(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracle(address oracle);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event Refundable(uint256 indexed epoch);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /* betBear() is called by the user who wants to place a bet that the price of the token will go down. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the WETH amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on bull and bear), BetInfo \r\n       struct (user's position and amount for that specific round) */\r\n\r\n    function betBear(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value>=minBetAmount,\"Bet amount must be greater than minBetAmount\");\r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n            require(ledger[epoch][msg.sender].position == Position_Bear, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bearAmount = round.bearAmount + amount;\r\n\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }     \r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bear;\r\n        betInfo.amount = betInfo.amount +  amount;\r\n        \r\n        emit BetBear(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BEAR,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betBull() is very similar to betBear() above, only difference is that this will place bet for token price\r\n       going up */\r\n\r\n    function betBull(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\"); \r\n        uint256 amount = msg.value;\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Bull, \"Can only bet on the same side\");         \r\n        }\r\n        \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bullAmount = round.bullAmount + amount;\r\n        \r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }          \r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position_Bull;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetBull(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_BULL,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n\r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require((block.timestamp > rounds[epochs[i]].closeTimestamp) || rounds[epochs[i]].ifRefundable, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n                treasuryAmount += _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            _safeTransferMatic(address(msg.sender), reward);\r\n        }\r\n    }\r\n    /* Our P2P contracts rewards user with bonus BOLD token for placing bets, irregardless of bets win or lose.\r\n       This method will take an array of round numbers and use the router to transfer the bonus BOLD tokens to  \r\n       the user */\r\n\r\n    function claimBonusRewards(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(bonusClaimable(epochs[i], msg.sender), \"Not eligible for bonus claim\");\r\n                addedReward = ledger[epochs[i]][msg.sender].amount;\r\n            }\r\n            ledger[epochs[i]][msg.sender].bonusClaimed = true;\r\n            reward += addedReward;\r\n\r\n            emit ClaimBonus(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM_BONUS,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).bonusPayment(tokenAddress,msg.sender, reward);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* In our prediction contracts, executeRound() will do three things :\r\n       1. Lock current round. Let's say, if we are at round 5, it will lock round 5 and users wouldn't be able to \r\n          place bets for round 5 anymore. At this point, it will fetch the price for WETH from chainlink oracle and \r\n          mark it as 'lockPrice' (_safeLockRound)\r\n       2. It will execute round 4. Round 4 was already locked but now it will be executed. It will fetch the price of      \r\n          WETH and mark it as 'closePrice' for round 4. For round #4, if closePrice > Lock Price, bull wins, otherwise\r\n          bear wins. (_safeEndRound)\r\n       3. Finally, it will open round #6 and allow users to place their bets for their specifc round. (_safeStartRound)      \r\n    */\r\n    function executeRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(\r\n            genesisStartOnce && genesisLockOnce,\r\n            \"Can only run after genesisStartRound and genesisLockRound is triggered\"\r\n        );\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\r\n        _calculateRewards(currentEpoch - 1);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock genesis round\r\n     * @dev Callable by operator\r\n     */\r\n    function genesisLockRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisLockOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Start genesis round\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n\r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */   \r\n\r\n   /**\r\n    * @dev This functin is called to manually mark a round as refundable\r\n    * @param epoch round is g\r\n     */\r\n    function makeRefundable(uint256 epoch) external onlyAdmin {\r\n        _makeRefundable(epoch);\r\n    }\r\n\r\n    /**\r\n    * @dev This functin is called to internally mark as refundable\r\n    * @param epoch round is g\r\n    */\r\n    function _makeRefundable(uint256 epoch) internal {\r\n       Round storage round = rounds[epoch];\r\n       require(\r\n             !round.oracleCalled,\r\n           \"Round has closed correctly\"\r\n       );\r\n       round.ifRefundable = true;\r\n       emit Refundable(epoch);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        uint256 currentTreasuryAmount = treasuryAmount;\r\n        treasuryAmount = 0;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        genesisLockOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set buffer and interval (in seconds)\r\n     * @dev Callable by admin\r\n     */\r\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\r\n        external\r\n        whenPaused\r\n        onlyAdmin\r\n    {\r\n        require(_bufferSeconds < _intervalSeconds, \"bufferSeconds must be inferior to intervalSeconds\");\r\n        bufferSeconds = _bufferSeconds;\r\n        intervalSeconds = _intervalSeconds;\r\n\r\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Oracle address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\r\n        require(_oracle != address(0), \"Cannot be zero address\");\r\n        oracleLatestRoundId = 0;\r\n        oracle = _oracle;\r\n        emit NewOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (bull/bear)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        if (round.lockPrice == round.closePrice) {\r\n            return false;\r\n        }\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.closePrice > round.lockPrice && betInfo.position == Position_Bull) ||\r\n                (round.closePrice < round.lockPrice && betInfo.position == Position_Bear) ||\r\n                (round.bullAmount == 0) || (round.bearAmount == 0)  \r\n                \r\n            );\r\n    }\r\n\r\n     /* This method determines id the user is eligible to claim bonus BOLD for any round */\r\n     \r\n    function bonusClaimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.bonusClaimed ;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable &&\r\n            !betInfo.claimed &&\r\n            //block.timestamp > round.closeTimestamp + bufferSeconds &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 WETH on bull and bull wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on bull)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 WETH worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.bullAmount == 0) {\r\n            rewardBaseCalAmount = round.bearAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.bearAmount == 0) {\r\n            rewardBaseCalAmount = round.bullAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        // Bull wins\r\n        else if (round.closePrice > round.lockPrice) {\r\n            rewardBaseCalAmount = round.bullAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Bear wins\r\n        else if (round.closePrice < round.lockPrice) {\r\n            rewardBaseCalAmount = round.bearAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n        uint256 result=0;\r\n        if(round.closePrice < round.lockPrice){\r\n            result=EV_BEAR;\r\n        }else if (round.closePrice > round.lockPrice){\r\n            result=EV_BULL;\r\n        }\r\n        IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, result);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].lockTimestamp != 0, \"Can only end round after round has locked\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        \r\n        // If round closes after bufferSeconds, contract will not stop, but current round would be marked\r\n        // as refundable\r\n        if(block.timestamp > rounds[epoch].closeTimestamp + bufferSeconds){\r\n            _makeRefundable(epoch);\r\n        }\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closePrice = price;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId, round.closePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeLockRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only lock round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].lockTimestamp, \"Can only lock round after lockTimestamp\");\r\n       \r\n         // Do not check lock timestamp (inital round price)\r\n\r\n        Round storage round = rounds[epoch];\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.lockPrice = price;\r\n\r\n        emit LockRound(epoch, roundId, round.lockPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 2].closeTimestamp != 0, \"Can only start round after round n-2 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\r\n            \"Can only start new round after round n-2 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.lockTimestamp = block.timestamp + intervalSeconds;\r\n        round.closeTimestamp = block.timestamp + (2 * intervalSeconds);\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].lockTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].lockTimestamp;\r\n    }\r\n\r\n    /*This method is used to connect to chainlink price oracle and fetch the current price for the token.\r\n      It is called by the safeLockRound and safeEndRound */\r\n\r\n    function _getPriceFromOracle() public payable returns (uint80, int256) {\r\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\r\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = AggregatorV3Interface(oracle).latestRoundData();\r\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\r\n       // console.log(\"roundId: %i\",roundId);\r\n        // console.log(\"oracleLatestRoundId: %i\",oracleLatestRoundId);\r\n        require(\r\n            uint256(roundId) > oracleLatestRoundId,\r\n            \"Oracle update roundId must be larger than oracleLatestRoundId\"\r\n        );\r\n        return (roundId, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "contracts/OFPredictionP2PStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n// pragma abicoder v2;\r\n\r\n\r\n\r\n/**\r\n * @title OFPredictionP2P\r\n */\r\ncontract OFPredictionP2PStorage {\r\n\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_BEAR=4;  \r\n    uint256 constant public EV_BULL=5;  \r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n    uint256 constant public Position_Bull=0;\r\n    uint256 constant public Position_Bear=1;  \r\n\r\n    address public oracle;\r\n\r\n    bool public genesisLockOnce;\r\n    bool public genesisStartOnce;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator}\r\n\r\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    address public tokenAddress;\r\n    address public routerContract; \r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Predictions game will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, lock price, close price\r\n       round result (bear,bull), total amount wagered, amount wagered on bull and bear etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */     \r\n\r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 lockTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 lockPrice;\r\n        int256 closePrice;\r\n        uint256 totalAmount;\r\n        uint256 bullAmount;\r\n        uint256 bearAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n        bool bonusClaimed;\r\n    }\r\n\r\n \r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestBoldToken.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"./ProxyTestBoldTokenStorage.sol\";\r\n\r\n/*\r\nBOLD Token : Is our company's token, that will be used to place bets against the house. \r\nThe rights to burn and mint this token is provided to only \"Allowed contracts\". Such contracts\r\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \r\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \r\nor burn these tokens.\r\n*/\r\n\r\ncontract ProxyTestBoldToken is \r\nInitializable,\r\nUUPSUpgradeable,\r\nERC20Upgradeable,\r\nOwnableUpgradeable,\r\nProxyTestBoldTokenStorage\r\n{\r\n\r\n  event AdminUpdated(address _admin);\r\n\r\n    //Proxy Functions\r\n     /** @dev initialize proxied contract.\r\n     */\r\n     function initialize() public initializer {\r\n        __Ownable_init();\r\n          __UUPSUpgradeable_init();\r\n         __ERC20_init(\"BOLD TOKEN\", \"BOLD\");\r\n         _changeAdmin(msg.sender);\r\n\r\n       _mint(msg.sender, 100000000000000000000000000000000);\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n  modifier onlyAllowedContracts(){\r\n    require(isAllowedContract(msg.sender),\"BoldToken - This address is not allowed\");\r\n     _;\r\n  }\r\n\r\n  function mint(address to, uint amount) external onlyAllowedContracts {\r\n    _mint(to, amount);\r\n  }\r\n  \r\n\r\n  function burn(address owner, uint amount) external onlyAllowedContracts {\r\n    _burn(owner, amount);\r\n  }\r\n\r\n  function allowContract(address _contract)  external  onlyOwner{\r\n      allowedcontracts[_contract]=true;\r\n    }\r\n\r\n  function disAllowContract(address _contract)  external onlyOwner{\r\n    allowedcontracts[_contract]=false;\r\n  }\r\n\r\n  function isAllowedContract(address _contract) public view returns(bool){\r\n    if(allowedcontracts[_contract]==true){\r\n        return true;\r\n    }\r\n    return false;\r\n    }\r\n\r\n  function updateAdmin(address newAdmin) external onlyOwner {\r\n   transferOwnership(newAdmin);\r\n  }\r\n\r\n  function setNEWFIELD(uint256 _NEWFIELD) public {\r\n    NEWFIELD=_NEWFIELD;\r\n  }\r\n}\r\n"
    },
    "contracts/testProxy/ProxyTestBoldTokenStorage.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n/*\r\nBOLD Token : Is our company's token, that will be used to place bets against the house. \r\nThe rights to burn and mint this token is provided to only \"Allowed contracts\". Such contracts\r\nare allowed or disallowed by the contract admin ( default to the one who initially deploys the \r\ncontract). Router contract will be one such 'Allowed Contract', that will be permitted to mint \r\nor burn these tokens.\r\n*/\r\n\r\ncontract ProxyTestBoldTokenStorage  {\r\n  \r\n  mapping(address =>bool) allowedcontracts;\r\n\r\n  //NEW FIELD\r\n  uint public NEWFIELD;\r\n\r\n}\r\n"
    },
    "contracts/OFStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./BoldToken.sol\";\r\nimport \"./OFStakingStorage.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/* \r\nOF Staking contract allows users to stake one token and receive the same or another token as reward.\r\nIt stores user info in an address to struct mapping, where each address is mapped to a struct object that \r\nhas the following details: Amount and time of user deposit, interest gathered on deposits. \r\n*/\r\n\r\ncontract OFStaking is\r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nOFStakingStorage\r\n{\r\n\r\n     //Proxy Functions\r\n\r\n     /**\r\n        @dev initialize function\r\n        @param _token Token used to stake\r\n        @param _bold  Token to pay earnings\r\n        @param _rate intetest\r\n        @param _minAmount Minimun amount allowed to stake\r\n     \r\n      */\r\n     function initialize(address _token, address _bold, uint256 _rate, uint256 _minAmount) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        bold = BoldToken(_bold);\r\n        token = IERC20(_token);\r\n        rate = _rate;\r\n        minStakeAmount= _minAmount;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n    event newRate(uint  proviousRate, uint  newRate,uint timestamp);\r\n    event newMinStakeAmount(uint  proviousRate, uint  newRate,uint timestamp);\r\n    event enterAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\r\n    event retireAmount(uint256  previousBalance, uint256  newBalance,uint256 interestAccumulated, uint timestamp);\r\n\r\n    /*  This function allows the user to stake certain amount of staking token in the contract. User first \r\n    needs to give allowance to the contract to transfer the tokens and then call enter(). It will check whether\r\n    if user already has some stake in the contract, it will calculate the interest accumulated till now \r\n    and store it in \"interestAccumulated\" of struct, and update the timestamp to latest. Finally, contract will update \r\n    the user balance to reflect the recent  */\r\n    function enter(uint256 _amount) public {\r\n        uint256 previousBalance=0;\r\n        require(_amount >= minStakeAmount,\"Stake amount should be greater than minimum stake amount\");\r\n        UserInfo storage user = users[msg.sender];\r\n        if(user.balance >0){\r\n            previousBalance=user.balance;\r\n            uint256 interestAccumulated = _calculateInterest(msg.sender, user.balance);\r\n            user.interestAccumulated = user.interestAccumulated + interestAccumulated ;\r\n        }\r\n        user.balance = user.balance + _amount;\r\n        user.timestamp = block.timestamp;\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        emit enterAmount(previousBalance, user.balance, user.interestAccumulated,user.timestamp);\r\n    }\r\n\r\n    /* Allows user to withdraw part or the complete stake. In either case, he will be transferred the desired\r\n       amount of staking token and minted ALL of the interest gathered till now in form of reward token */\r\n\r\n    function leave(uint256 share) public returns(uint) {\r\n        UserInfo storage user = users[msg.sender];\r\n        require(user.balance >= share,\"Share cannot be more than current deposits\");\r\n        require(share >= minStakeAmount,\"Withdraw amount should be more than the minimum req amount\");\r\n        uint256 interestCalculated = _calculateInterest(msg.sender,user.balance);\r\n        user.interestAccumulated = 0;\r\n        uint previousBalance=user.balance;\r\n        user.balance= user.balance - share;\r\n        user.timestamp = block.timestamp;\r\n        token.transfer(msg.sender,share);\r\n        bold.mint(msg.sender,interestCalculated);\r\n        // console.log(\"-----------------------\");\r\n        // console.log(\"previousBalance: %i\",previousBalance);\r\n        // console.log(\"user.balance: %i\",user.balance);\r\n        // console.log(\"interestCalculated: %i\",interestCalculated);\r\n        emit retireAmount(previousBalance, user.balance, interestCalculated,user.timestamp);\r\n        return interestCalculated;\r\n    }\r\n\r\n    /* User can cashout all his rewards till this point as the contract will mint reward token*/\r\n    function cashoutAllRewards() public returns (uint) {\r\n        UserInfo storage user = users[msg.sender];\r\n        require(user.balance > 0,\"User has no deposits\");\r\n        uint256 interestCalculated = _calculateInterest(msg.sender,user.balance);\r\n        user.interestAccumulated = 0;\r\n        user.timestamp = block.timestamp;\r\n        bold.mint(msg.sender,interestCalculated);\r\n        emit retireAmount(user.balance, user.balance, interestCalculated,user.timestamp);\r\n\r\n        return interestCalculated;\r\n    }\r\n\r\n    /* Internal method used to calculate rewards gained for a particual user and given amount. It first \r\n       checks how many days have elapsed since the stake was deposited, then uses the simple interest formula\r\n       and returns the result */\r\n    function _calculateInterest(address _addr, uint256 share) internal view returns(uint) {\r\n        UserInfo storage user = users[_addr];\r\n        uint256 daysElapsed = (block.timestamp - user.timestamp)/SECSINDAY;\r\n        // prinicpal * (no of days / 365) * (rate/10000) , 20% return ==> rate = 2000\r\n        uint256 interestCalculated = (share*daysElapsed*rate)/(3650000); \r\n        uint256 totalInterest = user.interestAccumulated + interestCalculated;\r\n        return totalInterest;\r\n    }\r\n\r\n    /* Returns the current stake amount and the reward amount gathered till now */\r\n    function getCurrentCashout(address sender) public view returns (uint _deposit,uint _CurrentInterest) {\r\n        uint256 deposit = users[sender].balance;\r\n        uint256 currentInterest = _calculateInterest(sender,deposit);\r\n        return (deposit,currentInterest);\r\n    }\r\n\r\n    function changeOwner(address _owner) external onlyOwner{\r\n      transferOwnership(_owner);\r\n    } \r\n\r\n    function changeRate(uint256 _rate) external onlyOwner{\r\n        uint256 previous=rate;\r\n        rate = _rate;\r\n        emit newRate(previous, _rate, block.timestamp);\r\n    } \r\n\r\n    \r\n    function changeMinStakeAmount(uint256 _minStakeAmount) external onlyOwner{\r\n        uint256 previous=minStakeAmount;\r\n        minStakeAmount = _minStakeAmount;\r\n        emit newMinStakeAmount(previous, minStakeAmount, block.timestamp);\r\n    } \r\n\r\n    //NEDED TO UPRADE CONTRACT\r\n   function upgrade(address _token, address _bold) public {\r\n        bold = BoldToken(_bold);\r\n        token = IERC20(_token);\r\n   }\r\n\r\n    \r\n\r\n}\r\n"
    },
    "contracts/OFCointossHouse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IRouter.sol\";\r\nimport \"./OFCointossHouseStorage.sol\";\r\n\r\n\r\ncontract OFCointossHouse  is \r\nInitializable, \r\nUUPSUpgradeable,\r\nOwnableUpgradeable,\r\nPausableUpgradeable, \r\nReentrancyGuardUpgradeable,\r\nOFCointossHouseStorage\r\n{\r\n  \r\n\r\n   //Proxy Functions\r\n\r\n    /**\r\n     * @notice Initialize function from proxy contract\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     */\r\n     function initialize(\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee,\r\n        address _tokenAddress,\r\n        address _routerContract,\r\n        address _feeToken,\r\n        uint256 _feeAmount\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        __ReentrancyGuard_init();\r\n         __Pausable_init();\r\n         _changeAdmin(msg.sender);\r\n\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n        tokenAddress = _tokenAddress;\r\n        routerContract = _routerContract;\r\n        feeToken =  _feeToken;\r\n        feeAmount = _feeAmount;\r\n\r\n        genesisStartOnce = false;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n    /* LIST OF EVENTS  */\r\n\r\n    event BetTails(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetHeads(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewIntervalPeriod(uint256 secs);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n    event requestRandom(bytes32 requestId);\r\n    event receivedRandom(uint256 randomness,address sender);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n\r\n    /* betTails() is called by the user who wants to place a bet for 'tails' outcome of the coin toss. It takes   \r\n       two parameters, round number and the bet amount. Basic validation is performed first, whether the round \r\n       is ongoing and not expired, the user has enough balance to place the bet etc. then the router contract is \r\n       called to transfer the amount from the user to the router. Lastly, state variable are updated that \r\n       includes: Round struct (total money bet on the round, total money on heads and tails), BetInfo \r\n       struct (user's position and amount for that specific round) \r\n    */\r\n\r\n    function betTails(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\");\r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\");\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Tails, \"Can only bet on the same side\");         \r\n        }\r\n\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount, treasuryFee);\r\n        totalFeeAmount = totalFeeAmount + feeAmount; \r\n\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.tailsAmount = round.tailsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        }        \r\n        betInfo.position = Position_Tails;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetTails(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_TAILS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* betHeads() is very similar to betTails() above */\r\n    \r\n    function betHeads(uint256 epoch,uint amount) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(amount >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(msg.value>=feeAmount,\"User does not have enough funds to pay the fees\");   \r\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount,\"User has not enought funds\");\r\n\r\n        if(ledger[epoch][msg.sender].amount >0){\r\n             require(ledger[epoch][msg.sender].position == Position_Heads, \"Can only bet on the same side\");         \r\n        }  \r\n\r\n        IRouter(routerContract).transferAndBurn(tokenAddress, msg.sender, amount,treasuryFee);\r\n        totalFeeAmount = totalFeeAmount + feeAmount;        \r\n        // Update round data\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.headsAmount = round.headsAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        if(ledger[epoch][msg.sender].amount == 0){\r\n            userRounds[msg.sender].push(epoch);       \r\n        } \r\n        betInfo.position = Position_Heads;\r\n        betInfo.amount = betInfo.amount + amount;\r\n\r\n        emit BetHeads(msg.sender, epoch, amount);\r\n        IRouter(routerContract).emitEvent(EV_HEADS,address(this),msg.sender,epoch, amount);\r\n    }\r\n\r\n    /* Claim method is used by a user to claim his winnings. It will take an array of round numbers for which\r\n       the user wants to claim his winnings. The method runs through the array one by one, performing validation \r\n       for each round: 1) whether round is over or not, 2) whether user won/lost for that specific round, \r\n       3) whether user has already claimed his reward for that round and 4) calculate his winnings after deducting\r\n       the treasury fees */\r\n     \r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp || rounds[epochs[i]].ifRefundable , \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * 2) - (ledger[epochs[i]][msg.sender].amount * 2 * treasuryFee/10000);\r\n\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                uint _treasuryAmount = (ledger[epochs[i]][msg.sender].amount*treasuryFee)/10000;\r\n                addedReward = ledger[epochs[i]][msg.sender].amount - _treasuryAmount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n            IRouter(routerContract).emitEvent(EV_CLAIM,address(this),msg.sender,epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            IRouter(routerContract).mint(tokenAddress, msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    \r\n    /* This method is called by the operator to get a random number, whose first bit ( 0 or 1) will determine\r\n       whether the toss outcome is heads or tails. This method is not directly called, it is called by the \r\n       exexcuteRound() method  */\r\n     \r\n    function fulfillRandomness(uint256 randomness)\r\n        public\r\n        virtual\r\n         whenNotPaused \r\n         onlyAdminOrOperator\r\n    {\r\n        randomResult = randomness;\r\n        count++;\r\n        emit receivedRandom(randomness,msg.sender);\r\n        \r\n        \r\n\r\n        oracleLatestRoundId=count;\r\n        uint80 currentRoundId=uint80(count);\r\n\r\n\r\n         // #VBVB we need only first bit\r\n         int256 result=int256(randomness & uint256(0x01));\r\n             uint emitResult=EV_TAILS;\r\n         if(result>0){\r\n             emitResult=EV_HEADS;\r\n         }\r\n         IRouter(routerContract).emitEvent(EV_RESULT,address(this),msg.sender,currentEpoch, emitResult);\r\n        _safeEndRound(currentEpoch, currentRoundId, result);\r\n        _calculateRewards(currentEpoch);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /* This method needs to be called when the first round needs to be started. This initiates the first round,\r\n        and subsequent rounds ( round2, round3 etc.) are started by the executeRound() method. */\r\n    \r\n    function genesisStartRound() external whenNotPaused onlyAdminOrOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n    \r\n    /* Certain rounds can be nulled and marked refundable by the admin. This can happen due to technical flaws\r\n       or malpractice */\r\n\r\n    function makeRefundable(uint256 epoch) external whenPaused onlyAdmin {\r\n       Round storage round = rounds[epoch];\r\n       round.ifRefundable = true;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        //This contract uses BOLD to bet and MATIC to pay fees,\r\n        // all MATIC funds of this contract are fees that must be paid to treasury\r\n        uint256 currentTreasuryAmount = address(this).balance;\r\n        address treasuryWallet=IRouter(routerContract).getTreasuryWallet();\r\n        address txFeeWallet=IRouter(routerContract).getTxFeeWallet();\r\n        (uint amountTreasury, uint amountTx) = \r\n            IRouter(routerContract).calculateTreasuryFees(currentTreasuryAmount);\r\n        _safeTransferMatic(treasuryWallet, amountTreasury);\r\n        _safeTransferMatic(txFeeWallet, amountTx);\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n        /**\r\n     * @notice Set fee token address\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeToken(address _token) external whenPaused onlyAdmin {\r\n        require(_token != address(0), \"Cannot be zero address\");\r\n        feeToken = _token;\r\n    }\r\n\r\n    /**\r\n     * @notice Set fee amount\r\n     * @dev Callable by admin\r\n     */\r\n    function setFeeAmount(uint256 _amount) external whenPaused onlyAdmin {\r\n        feeAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        // Profit would send from router\r\n        //IRouter(routerContract).profit(_token, msg.sender, _amount);\r\n        IERC20(_token).transfer( msg.sender, _amount);\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set interval seconds\r\n     * @dev Callable by admin\r\n     */\r\n    function setIntervalSeconds(uint256 _intervalSeconds) external whenPaused onlyAdmin {\r\n        require(_intervalSeconds > 0, \"Must be greater than 0\");\r\n        intervalSeconds = _intervalSeconds;\r\n        emit NewIntervalPeriod(_intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n           // ## VBVB Uncontrolled error condition\r\n        require(cursor<=userRounds[user].length, \"Cursor out of bounds\");\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /* This method determines if the user is eligible to claim any winnings for a specific round by \r\n       checking the following conditions: 1) If the round is over and result has been called 2) If user \r\n       made any bet for that round 3) If user has already claimed his winnings 4) If the outcome (head/tails)\r\n       was as predicted by the user  */\r\n\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.tossResult == 1 && betInfo.position == Position_Heads) ||\r\n             (round.tossResult == 0 && betInfo.position == Position_Tails) \r\n            );\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            round.ifRefundable&& \r\n            !betInfo.claimed &&\r\n            block.timestamp > round.closeTimestamp &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /* This method is called by the executeRound() method. It is our basic algorithm which settles all user bets\r\n       by a simple formula. For ex: If Adam placed a wager of 10 BOLD on tails and tails wins, his winnings would be \r\n       as follows : (Adam's Bet/ Total bets on tails)* (Total amount of wagers placed). This method will also deduct\r\n       the treasury fees from the total amount of bets. If there is 0 BOLD worth of bets from one side, all bets\r\n       will be voided and the result would be deemed unconsquential  */\r\n\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        if (round.headsAmount == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;   \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tailsAmount == 0) {\r\n            rewardBaseCalAmount = round.headsAmount;    \r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n\r\n        else if (round.tossResult == 1) {\r\n            rewardBaseCalAmount = round.headsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Tails wins\r\n        else if (round.tossResult == 0) {\r\n            rewardBaseCalAmount = round.tailsAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        //treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only end round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        Round storage round = rounds[epoch];\r\n        round.tossResult = price;\r\n        round.closeOracleId = roundId;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 1].closeTimestamp != 0, \"Can only start round after round n-1 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 1].closeTimestamp,\r\n            \"Can only start new round after round n-1 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].closeTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].closeTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _safeTransferMatic(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: MATIC_TRANSFER_FAILED\");\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/OFCointossHouseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract OFCointossHouseStorage {\r\n\r\n\r\n    uint256 constant public EV_CLAIM=1;  \r\n    uint256 constant public EV_TAILS=2;\r\n    uint256 constant public EV_HEADS=3;\r\n    uint256 constant public EV_CLAIM_BONUS=10;\r\n    uint256 constant public EV_RESULT=11; \r\n    uint256 constant public Position_Tails=0;\r\n    uint256 constant public Position_Heads=1;\r\n    bool public genesisStartOnce; // Not safe for proxy = false;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator\r\n\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    //#VBVB This block is for VRF Agregator\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    uint256 public randomResult;\r\n    uint256 public count;\r\n    address public tokenAddress;\r\n    address public routerContract;\r\n    uint256 public totalFeeAmount;\r\n    uint256 public feeAmount;\r\n    address public feeToken;\r\n\r\n    /* This smart contract uses two main data structures : a) round struct b) betInfo struct\r\n       Coin Toss will be conducted round by round with information for each round being stored in the 'Round'\r\n       struct and info for all the rounds being stored in the 'rounds' mapping i.e rounds[1], rounds[2] etc.\r\n\r\n       The 'Round' struct will have the following info: {round number, starting time, closing time, round result\r\n       (heads,tails), total amount wagered, amount wagered on heads and tails etc.}\r\n\r\n       The 'BetInfo' struct will be created everytime a user places a bet and will have {position, amount,claimed}.\r\n       The ledger will container information by the round i.e the list of bets placed in \r\n       each round {Round Number -----> BetInfo[] }\r\n\r\n    */\r\n\r\n\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 tossResult;\r\n        uint256 closeOracleId;\r\n        uint256 totalAmount;\r\n        uint256 headsAmount;\r\n        uint256 tailsAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n        bool ifRefundable;\r\n    }\r\n\r\n    struct BetInfo {\r\n        uint256 position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n}\r\n\r\n"
    },
    "contracts/EquivalenceFormula.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"./IEquivalence.sol\";\r\nimport \"./EquivalenceFormulaStorage.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n\r\n/** @title Equvalence contract: Calculates equivalence between a token and BOLD */\r\ncontract EquivalenceFormula is \r\nIEquivalence, \r\nInitializable, \r\nUUPSUpgradeable, \r\nOwnableUpgradeable,\r\nEquivalenceFormulaStorage\r\n{\r\n\r\n    //Proxy Functions\r\n\r\n     function initialize(\r\n        uint _priceRatio,\r\n        uint _ratio,\r\n        uint _decimals,\r\n        uint _kink1,\r\n        uint _A1,\r\n        uint _C1,\r\n         uint _kink2,\r\n        uint _A2,\r\n        uint _C2\r\n     ) public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _changeAdmin(msg.sender);\r\n\r\n        priceRatio=_priceRatio;\r\n        ratio=_ratio;\r\n        decimals=_decimals;\r\n        kink1=_kink1;\r\n        A1=_A1;\r\n        C1=_C1;\r\n        kink2=_kink2;\r\n        A2=_A2;\r\n        C2=_C2;\r\n    }\r\n\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // End: Proxy Functions\r\n\r\n\r\n\r\n    /**\r\n     * @notice Set Price conversion ratio from weth to USD\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setPriceRatio(uint _value) public onlyOwner{\r\n        priceRatio=_value;\r\n    }\r\n\r\n\r\n     /**\r\n     * @notice Set conversion ratio\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setRatio(uint _value) public onlyOwner{\r\n        ratio=_value;\r\n    }\r\n\r\n     /**\r\n     * @notice Set decimals for parameters kink1, kink2, A1, A2, C1, C2\r\n     * @param _value Ratio used to transform a Token to BOLD\r\n     */\r\n    function setDecimals(uint _value) public onlyOwner{\r\n        decimals=_value;\r\n    }\r\n\r\n    function setKink1(uint _value) public onlyOwner{\r\n\t    kink1=_value;\r\n    }\r\n\r\n    function setKink2(uint _value) public onlyOwner{\r\n\t    kink2=_value;\r\n    }\r\n\r\n    function setA1(uint _value) public onlyOwner{\r\n\t    A1=_value;\r\n    }\r\n\r\n    function setA2(uint _value) public onlyOwner{\r\n\t    A2=_value;\r\n    }\r\n\r\n    function setC1(uint _value) public onlyOwner{\r\n\t    C1=_value;\r\n    }\r\n\r\n    function setC2(uint _value) public onlyOwner{\r\n\t    C2=_value;\r\n    }\r\n\r\n    function F0(uint amount, uint ratio) public view returns (uint){\r\n        // console.log(\"F0(%i)\",(amount));\r\n        return amount*ratio/(10**decimals);\r\n    }\r\n\r\n    function F1(uint amount, uint ratio, uint A, uint C) public view returns (uint){\r\n        // console.log(\"F1 - amount\",(amount));\r\n        // console.log(\"F1 - ratio\",(ratio));\r\n        // console.log(\"F1 - A\",(A));\r\n        // console.log(\"F1 - C\",(C));\r\n        uint item1=(amount*ratio*A)/((10**decimals)**2);\r\n        uint item2=item1+(C*10**18/10**3);\r\n        return item2;\r\n    }\r\n    \r\n    /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the toke. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in BOLD\r\n     * @return amount in bold\r\n     */\r\n    function calculateToBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        // console.log(\">>>> Amount /t\", _amount);\r\n        // console.log(\">>>> kink2: /t\",kink2);\r\n       uint convertedAmount=_amount*(10**decimals)/priceRatio;\r\n\r\n       if(convertedAmount <= kink1){\r\n        //console.log(\">>>> 1 \");\r\n           return F0(convertedAmount,ratio);\r\n       }else if(convertedAmount < kink2){\r\n           //console.log(\">>>> 2 \");\r\n           return F1(convertedAmount,ratio,A1,C1);\r\n       }else{\r\n           //console.log(\">>>> 3 \");\r\n           return F1(convertedAmount,ratio,A2,C2);\r\n       }\r\n                \r\n    }\r\n\r\n     /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the token. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in _token\r\n     * @return amount in bold\r\n     */\r\n    function calculateFromBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        return _amount;\r\n    }\r\n\r\n   \r\n\r\n}"
    },
    "contracts/EquivalenceFormulaStorage.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\n\r\n/** @title Equvalence contract data : Used by EquivalenceFormula */\r\ncontract EquivalenceFormulaStorage{\r\n\r\n    // RATIO with 3 decimals. 1000000 equals to multiply by 1000\r\n    uint public priceRatio;\r\n    // RATIO with 3 decimals. 1000000 equals to multiply by 1000\r\n    uint public ratio;\r\n    // Decimals used \r\n    uint public decimals;\r\n\r\n    uint public kink1;\r\n    uint public A1;\r\n    uint public C1;\r\n    uint public kink2;\r\n    uint public A2;\r\n    uint public C2;\r\n    \r\n}"
    },
    "contracts/Equivalence.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IEquivalence.sol\";\r\n\r\n\r\n/** @title Equvalence contract: Calculates equivalence between a token and BOLD */\r\ncontract Equivalence is Ownable, IEquivalence{\r\n\r\n    // RATIO with 3 decimals. 1000000 equals to multiply by 1000\r\n    uint public ratio=1000000;\r\n    // Decimals used \r\n    uint public decimals=3;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _ratio Ratio used to transform a Token to BOLD\r\n     */\r\n    constructor(uint _ratio){\r\n        ratio=_ratio;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the toke. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in BOLD\r\n     * @return amount in bold\r\n     */\r\n    function calculateToBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        //Safemath is included on solidity 0.8 by default\r\n        uint denominator=10**decimals;\r\n        uint _equivalence=(_amount*ratio)/denominator;\r\n        return _equivalence;\r\n    }\r\n\r\n     /**\r\n     * @notice Carries out the calculations\r\n     * @param _token address of the token. Currently not used but allows to have different formulas for each token type\r\n     * @param _to User that executes the transaction. Currently not used but allow to have different formulas for each used\r\n     * @param _amount Amount to be transformed in the amount equivalent in _token\r\n     * @return amount in bold\r\n     */\r\n    function calculateFromBold(address _token, address _to,uint _amount) external override view  returns(uint){\r\n        //Safemath is included on solidity 0.8 by default\r\n        uint denominator=10**decimals;\r\n        uint _equivalence=_amount*denominator/(ratio);\r\n        return _equivalence;\r\n    }\r\n\r\n    /**\r\n     * @notice Set conversion ratio\r\n     * @param newRatio Ratio used to transform a Token to BOLD\r\n     */\r\n    function setRatio(uint newRatio) public onlyOwner{\r\n        ratio=newRatio;\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/OFPreSales.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./BoldToken.sol\";\r\n\r\n\r\n\r\ncontract OFPreSales is Ownable,ReentrancyGuard,Pausable {\r\n\r\n    using SafeERC20 for IERC20;\r\n    address treasury;\r\n    address token;\r\n    address bold;\r\n\r\n    struct User{\r\n      uint256 limit;\r\n      uint256 releaseTime;\r\n      uint256 deposit;\r\n      uint256 payout;\r\n      uint256 locktime;\r\n    }\r\n\r\n    mapping(address => User) users;\r\n\r\n    event saleIssued(address indexed _buyer, uint256 _amount, uint256 _payout, uint256 _time);\r\n    event depositMade(address indexed _user,  uint256 _amount,uint256 indexed _time);\r\n    event Withdrawn(address indexed _user,  uint256 _amount);\r\n\r\n\r\n    constructor(\r\n        address _treasury,\r\n        address _token,\r\n        address _bold     \r\n    ){\r\n        treasury = _treasury;\r\n        token = _token;\r\n        bold = _bold;\r\n    }\r\n\r\n    function issueSale(address buyer, uint256 amount, uint256 payout, uint256 time) external onlyOwner {\r\n        User storage user = users[buyer];\r\n        user.limit = amount;\r\n        user.payout = payout;\r\n        user.locktime = time;\r\n\r\n        emit saleIssued(buyer,amount,payout,time);\r\n    }    \r\n \r\n    function deposit() external payable nonReentrant{\r\n        User storage user = users[msg.sender];\r\n        uint256 amount = user.limit;\r\n        require(amount > 0, \"User is not allowed\");\r\n        require(IERC20(token).balanceOf(msg.sender)>=amount,\"User has not enought funds\");\r\n        IERC20(token).transferFrom(msg.sender, treasury, amount);\r\n        user.deposit = amount;\r\n        user.limit =  0;\r\n        user.releaseTime = block.timestamp + user.locktime;\r\n\r\n        emit depositMade(msg.sender,amount,block.timestamp);\r\n    }\r\n\r\n    function withdraw() external payable nonReentrant whenNotPaused{\r\n         User storage user = users[msg.sender]; \r\n         require(user.deposit >0, \"User does not have any deposits\");\r\n         require(block.timestamp > user.releaseTime , \"Time lock period has not expired\");\r\n         user.deposit = 0; \r\n         user.releaseTime = 0;\r\n         user.locktime = 0;\r\n         user.payout=0;\r\n         BoldToken(bold).mint(msg.sender,user.payout);\r\n\r\n         emit Withdrawn(msg.sender,user.payout);\r\n    }   \r\n\r\n    function getUserData(address _user) public view returns (uint256 _deposit, uint256 _payout , uint256 _time ){\r\n        User storage user = users[_user];\r\n        return (user.deposit, user.payout,user.releaseTime);\r\n    } \r\n\r\n    function setTreasury(address _treasury) external onlyOwner{\r\n        require(_treasury!=address(0),\"New address cannot be zero\");\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setToken(address _token) external onlyOwner{\r\n        require(_token!=address(0),\"New address cannot be zero\");\r\n        token = _token;\r\n    }\r\n\r\n    function setBold(address _bold) external onlyOwner{\r\n        require(_bold!=address(0),\"New address cannot be zero\");\r\n        bold = _bold;\r\n    }\r\n\r\n    function pause() external whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/utils/UUPSProxy.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\n\r\n//Added this contract as it is stated on https://github.com/wighawag/hardhat-deploy/issues/146\r\n\r\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\r\ncontract UUPSProxy is ERC1967Proxy {\r\n  constructor(\r\n    address _logic,\r\n    address, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\r\n    bytes memory _data\r\n  ) payable ERC1967Proxy(_logic, _data) {}\r\n}"
    },
    "contracts/mock/SpoxToken.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token mock, where all tokens are pre-assigned to the deployer.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other standatd fuctions\r\n */\r\ncontract SpoxToken is ERC20 {\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() ERC20(\"SPOX TOKEN\", \"SPX\") {\r\n        _mint(msg.sender, 100000000000000000000000000);\r\n    }\r\n}"
    },
    "contracts/mock/MockLinkToken.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token mock, where all tokens are pre-assigned to the deployer.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other standatd fuctions\r\n */\r\ncontract MockLinkToken is ERC20 {\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() ERC20(\"MOCK LINK TOKEN\", \"MOCKLINK\") {\r\n        _mint(msg.sender, 100000000000000000000000000);\r\n    }\r\n\r\n    address public rto;\r\n    uint public rvalue; \r\n    bytes public rdata;\r\n\r\n    function transferAndCall(address to, uint value, bytes calldata data) external returns (bool success){\r\n        rto=to;\r\n        rvalue=value;\r\n        rdata=data;\r\n    }\r\n\r\n    //HELPER FUNCTION\r\n\r\n    function getBlockInfo() public view returns(\r\n       bytes32 blockHash,\r\n        uint chainID,\r\n        address coinbase,\r\n        uint gaslimit,\r\n        uint blockNumber,\r\n        uint blockTimestamp\r\n    ){\r\n        return(\r\n            blockhash(block.number),\r\n                block.chainid,\r\n                block.coinbase,\r\n                block.gaslimit,\r\n                block.number,\r\n                block.timestamp\r\n        );\r\n    }\r\n    \r\n}"
    },
    "contracts/mock/MockAgregatorV3.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n    function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\ncontract MockAgregatorV3 is AggregatorV3Interface{\r\n    \r\n    uint public initialPrice=400; \r\n    \r\n    function decimals()\r\n    external override\r\n    view\r\n    returns (\r\n      uint8\r\n    ){\r\n        return 18;\r\n    }\r\n\r\n  function description()\r\n    external override\r\n    view\r\n    returns (\r\n      string memory\r\n    ){\r\n        return \"Mock Agregator for testing\";\r\n    }\r\n\r\n\r\n    uint80 public roundId;\r\n    int256 public answer;\r\n    uint256 public startedAt;\r\n    uint256 public updatedAt;\r\n    uint80  public answeredInRound;\r\n\r\n  function version()\r\n    external \r\n    override\r\n    view\r\n    returns (\r\n      uint256\r\n    ){\r\n        return 1;\r\n    }\r\n\r\n    function getRoundData(uint80 _roundId)\r\n    external override\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    ){\r\n        return latestRoundData();\r\n    }\r\n\r\n  function latestRoundData()\r\n    public override\r\n    view\r\n    returns (\r\n     uint80 _roundId,\r\n      int256 _answer,\r\n      uint256 _startedAt,\r\n      uint256 _updatedAt,\r\n      uint80 _answeredInRound\r\n    ){\r\n       //console.log(\"V3 roundId %i\",roundId);\r\n        return (roundId,answer,startedAt,updatedAt,answeredInRound);\r\n    }\r\n\r\n    function setOracleParameters(\r\n      uint80 _roundId,\r\n      int256 _answer,\r\n      uint256 _updatedAt\r\n      ) public {\r\n        require(_roundId>roundId,\"MOCK - New round must be greater than previous\");\r\n        roundId=_roundId;\r\n        answer=_answer;\r\n        startedAt=1000;\r\n        updatedAt=_updatedAt;\r\n        answeredInRound=10000;\r\n        //console.log(\"V2 roundId %i\",roundId);\r\n      }\r\n\r\n      //HELPER FUNCTION\r\n\r\n    function getBlockInfo() public view returns(\r\n       bytes32 blockHash,\r\n        uint chainID,\r\n        address coinbase,\r\n        uint gaslimit,\r\n        uint blockNumber,\r\n        uint blockTimestamp\r\n    ){\r\n        return(\r\n            blockhash(block.number),\r\n                block.chainid,\r\n                block.coinbase,\r\n                block.gaslimit,\r\n                block.number,\r\n                block.timestamp\r\n        );\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}